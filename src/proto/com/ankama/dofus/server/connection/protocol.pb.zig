// Code generated by protoc-gen-zig
///! package com.ankama.dofus.server.connection.protocol
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;

pub const LoginMessage = struct {
    content: ?content_union,

    pub const _content_case = enum {
        request,
        response,
        event,
    };
    pub const content_union = union(_content_case) {
        request: Request,
        response: Response,
        event: Event,
        pub const _union_desc = .{
            .request = fd(1, .{ .SubMessage = {} }),
            .response = fd(2, .{ .SubMessage = {} }),
            .event = fd(3, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .content = fd(null, .{ .OneOf = content_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Request = struct {
    uuid: ManagedString = .Empty,
    content: ?content_union,

    pub const _content_case = enum {
        ping,
        identification,
        selectServer,
        forceAccount,
        releaseAccount,
        friend_list_request,
        acquaintance_servers_request,
    };
    pub const content_union = union(_content_case) {
        ping: Ping,
        identification: IdentificationRequest,
        selectServer: SelectServerRequest,
        forceAccount: ForceAccountRequest,
        releaseAccount: ReleaseAccountRequest,
        friend_list_request: FriendListRequest,
        acquaintance_servers_request: AcquaintanceServersRequest,
        pub const _union_desc = .{
            .ping = fd(2, .{ .SubMessage = {} }),
            .identification = fd(3, .{ .SubMessage = {} }),
            .selectServer = fd(4, .{ .SubMessage = {} }),
            .forceAccount = fd(5, .{ .SubMessage = {} }),
            .releaseAccount = fd(6, .{ .SubMessage = {} }),
            .friend_list_request = fd(7, .{ .SubMessage = {} }),
            .acquaintance_servers_request = fd(8, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .uuid = fd(1, .String),
        .content = fd(null, .{ .OneOf = content_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Response = struct {
    uuid: ManagedString = .Empty,
    content: ?content_union,

    pub const _content_case = enum {
        pong,
        identification,
        selectServer,
        forceAccount,
        friend_list,
        acquaintance_servers_response,
    };
    pub const content_union = union(_content_case) {
        pong: Pong,
        identification: IdentificationResponse,
        selectServer: SelectServerResponse,
        forceAccount: ForceAccountResponse,
        friend_list: FriendListResponse,
        acquaintance_servers_response: AcquaintanceServersResponse,
        pub const _union_desc = .{
            .pong = fd(2, .{ .SubMessage = {} }),
            .identification = fd(3, .{ .SubMessage = {} }),
            .selectServer = fd(4, .{ .SubMessage = {} }),
            .forceAccount = fd(5, .{ .SubMessage = {} }),
            .friend_list = fd(6, .{ .SubMessage = {} }),
            .acquaintance_servers_response = fd(7, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .uuid = fd(1, .String),
        .content = fd(null, .{ .OneOf = content_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Event = struct {
    content: ?content_union,

    pub const _content_case = enum {
        server,
        update_server_event,
    };
    pub const content_union = union(_content_case) {
        server: Server,
        update_server_event: UpdateServerEvent,
        pub const _union_desc = .{
            .server = fd(1, .{ .SubMessage = {} }),
            .update_server_event = fd(2, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .content = fd(null, .{ .OneOf = content_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Ping = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Pong = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UpdateServerEvent = struct {
    serverInformation: ?ServerInformation = null,

    pub const _desc_table = .{
        .serverInformation = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const IdentificationRequest = struct {
    device_identifier: ManagedString = .Empty,
    client_version: ManagedString = .Empty,
    identification_type: ?identification_type_union,

    pub const _identification_type_case = enum {
        tokenRequest,
        loginRequest,
    };
    pub const identification_type_union = union(_identification_type_case) {
        tokenRequest: TokenRequest,
        loginRequest: LoginRequest,
        pub const _union_desc = .{
            .tokenRequest = fd(3, .{ .SubMessage = {} }),
            .loginRequest = fd(4, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .device_identifier = fd(1, .String),
        .client_version = fd(5, .String),
        .identification_type = fd(null, .{ .OneOf = identification_type_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TokenRequest = struct {
    token: ManagedString = .Empty,
    shield: ?Shield = null,

    pub const _desc_table = .{
        .token = fd(1, .String),
        .shield = fd(2, .{ .SubMessage = {} }),
    };

    pub const Shield = struct {
        certificateId: i64 = 0,
        certificateHash: ManagedString = .Empty,

        pub const _desc_table = .{
            .certificateId = fd(1, .{ .Varint = .Simple }),
            .certificateHash = fd(2, .String),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const LoginRequest = struct {
    login: ManagedString = .Empty,

    pub const _desc_table = .{
        .login = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const IdentificationResponse = struct {
    result: ?result_union,

    pub const _result_case = enum {
        success,
        @"error",
    };
    pub const result_union = union(_result_case) {
        success: Success,
        @"error": Error,
        pub const _union_desc = .{
            .success = fd(1, .{ .SubMessage = {} }),
            .@"error" = fd(2, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .result = fd(null, .{ .OneOf = result_union }),
    };

    pub const Success = struct {
        account_id: i64 = 0,
        account_nickname: ManagedString = .Empty,
        account_tag: ManagedString = .Empty,
        server_list: ?ServerList = null,
        subscription_end_date: ManagedString = .Empty,
        rights: ?Rights = null,
        fight_reconnection_server_id: ?i32 = null,

        pub const _desc_table = .{
            .account_id = fd(1, .{ .Varint = .Simple }),
            .account_nickname = fd(2, .String),
            .account_tag = fd(3, .String),
            .server_list = fd(4, .{ .SubMessage = {} }),
            .subscription_end_date = fd(5, .String),
            .rights = fd(6, .{ .SubMessage = {} }),
            .fight_reconnection_server_id = fd(7, .{ .Varint = .Simple }),
        };

        pub const Rights = struct {
            show_force_account: bool = false,
            show_console: bool = false,
            unlimited_access: bool = false,
            infinite_subscription: bool = false,
            report: bool = false,

            pub const _desc_table = .{
                .show_force_account = fd(1, .{ .Varint = .Simple }),
                .show_console = fd(2, .{ .Varint = .Simple }),
                .unlimited_access = fd(3, .{ .Varint = .Simple }),
                .infinite_subscription = fd(4, .{ .Varint = .Simple }),
                .report = fd(5, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Error = struct {
        reason: Reason = @enumFromInt(0),
        ban_end_date: ?ManagedString = null,
        required_version: ?ManagedString = null,

        pub const _desc_table = .{
            .reason = fd(1, .{ .Varint = .Simple }),
            .ban_end_date = fd(2, .String),
            .required_version = fd(3, .String),
        };

        pub const Reason = enum(i32) {
            UNKNOWN_AUTH_ERROR = 0,
            ALREADY_CONNECTED = 1,
            OTP_TIMEOUT = 2,
            BANNED = 3,
            INVALID_SHIELD_CERTIFICATE = 4,
            LOCKED = 5,
            CREDENTIALS_RESET = 6,
            WRONG_CREDENTIALS = 7,
            EMAIL_UNVALIDATED = 8,
            ANONYMOUS_IP_FORBIDDEN = 9,
            NICKNAME_REGISTRATION = 10,
            UNAUTHORIZED = 11,
            INVALID_CLIENT_VERSION = 12,
            OUTDATED_CLIENT_VERSION = 13,
            _,
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SelectServerRequest = struct {
    server: i32 = 0,

    pub const _desc_table = .{
        .server = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SelectServerResponse = struct {
    result: ?result_union,

    pub const _result_case = enum {
        success,
        @"error",
    };
    pub const result_union = union(_result_case) {
        success: Success,
        @"error": Error,
        pub const _union_desc = .{
            .success = fd(1, .{ .SubMessage = {} }),
            .@"error" = fd(2, .{ .Varint = .Simple }),
        };
    };

    pub const _desc_table = .{
        .result = fd(null, .{ .OneOf = result_union }),
    };

    pub const Error = enum(i32) {
        REFUSED = 0,
        SUBSCRIBER_ONLY = 1,
        SINGLE_ACCOUNT_VERIFIED_ONLY = 2,
        MAINTENANCE = 3,
        _,
    };

    pub const Success = struct {
        token: ManagedString = .Empty,
        host: ManagedString = .Empty,
        ports: ArrayList(i32),

        pub const _desc_table = .{
            .token = fd(1, .String),
            .host = fd(2, .String),
            .ports = fd(3, .{ .PackedList = .{ .Varint = .Simple } }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ServerList = struct {
    servers: ArrayList(ServerInformation),
    max_slot_by_type: i32 = 0,

    pub const _desc_table = .{
        .servers = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .max_slot_by_type = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ServerInformation = struct {
    server: ?Server = null,
    accessibility: Accessibility = @enumFromInt(0),
    characters: ArrayList(CharacterInformation),

    pub const _desc_table = .{
        .server = fd(1, .{ .SubMessage = {} }),
        .accessibility = fd(2, .{ .Varint = .Simple }),
        .characters = fd(3, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const Accessibility = enum(i32) {
        ACCESSIBLE = 0,
        SUBSCRIBE_RESTRICTION = 1,
        MONO_ACCOUNT_RESTRICTION = 2,
        UNKNOWN = 3,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Server = struct {
    id: i32 = 0,
    status: Status = @enumFromInt(0),
    mono_account: bool = false,

    pub const _desc_table = .{
        .id = fd(1, .{ .Varint = .Simple }),
        .status = fd(2, .{ .Varint = .Simple }),
        .mono_account = fd(3, .{ .Varint = .Simple }),
    };

    pub const Status = enum(i32) {
        ONLINE = 0,
        MAINTENANCE = 1,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ForceAccountRequest = struct {
    account_id: i64 = 0,

    pub const _desc_table = .{
        .account_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ForceAccountResponse = struct {
    content: ?content_union,

    pub const _content_case = enum {
        success,
        @"error",
    };
    pub const content_union = union(_content_case) {
        success: ForceAccountStatus,
        @"error": ForceAccountError,
        pub const _union_desc = .{
            .success = fd(2, .{ .SubMessage = {} }),
            .@"error" = fd(3, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .content = fd(null, .{ .OneOf = content_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ForceAccountStatus = struct {
    is_forced: bool = false,
    forced_account_id: i64 = 0,
    forced_account_nickname: ManagedString = .Empty,
    forced_account_tag: ManagedString = .Empty,
    server_list: ?ServerList = null,

    pub const _desc_table = .{
        .is_forced = fd(1, .{ .Varint = .Simple }),
        .forced_account_id = fd(2, .{ .Varint = .Simple }),
        .forced_account_nickname = fd(3, .String),
        .forced_account_tag = fd(4, .String),
        .server_list = fd(5, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ForceAccountError = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ReleaseAccountRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CharacterInformation = struct {
    name: ManagedString = .Empty,
    breed: Breed = @enumFromInt(0),
    gender: Gender = @enumFromInt(0),
    level: i32 = 0,
    last_connection_date: ManagedString = .Empty,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .breed = fd(2, .{ .Varint = .Simple }),
        .gender = fd(3, .{ .Varint = .Simple }),
        .level = fd(4, .{ .Varint = .Simple }),
        .last_connection_date = fd(5, .String),
    };

    pub const Gender = enum(i32) {
        MALE = 0,
        FEMALE = 1,
        _,
    };

    pub const Breed = enum(i32) {
        FECA = 0,
        OSAMODAS = 1,
        ENUTROF = 2,
        SRAM = 3,
        XELOR = 4,
        ECAFLIP = 5,
        ENIRIPSA = 6,
        IOP = 7,
        CRA = 8,
        SADIDA = 9,
        SACRIER = 10,
        PANDAWA = 11,
        ROGUE = 12,
        MASQUERAIDER = 13,
        FOGGERNAUTS = 14,
        ELIOTROPE = 15,
        HUPPERMAGE = 16,
        OUGINAK = 17,
        FORGELANCE = 18,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendListRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendListResponse = struct {
    result: ?result_union,

    pub const _result_case = enum {
        friends,
        @"error",
    };
    pub const result_union = union(_result_case) {
        friends: FriendList,
        @"error": Error,
        pub const _union_desc = .{
            .friends = fd(1, .{ .SubMessage = {} }),
            .@"error" = fd(2, .{ .Varint = .Simple }),
        };
    };

    pub const _desc_table = .{
        .result = fd(null, .{ .OneOf = result_union }),
    };

    pub const Error = enum(i32) {
        UNKNOWN = 0,
        FLOODING = 1,
        _,
    };

    pub const FriendList = struct {
        friends: ArrayList(Friend),

        pub const _desc_table = .{
            .friends = fd(1, .{ .List = .{ .SubMessage = {} } }),
        };

        pub const Friend = struct {
            account_name: ManagedString = .Empty,
            account_tag: ManagedString = .Empty,
            servers: ArrayList(i32),

            pub const _desc_table = .{
                .account_name = fd(1, .String),
                .account_tag = fd(2, .String),
                .servers = fd(3, .{ .PackedList = .{ .Varint = .Simple } }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AcquaintanceServersRequest = struct {
    name: ManagedString = .Empty,
    tag: ManagedString = .Empty,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .tag = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AcquaintanceServersResponse = struct {
    result: ?result_union,

    pub const _result_case = enum {
        servers,
        @"error",
    };
    pub const result_union = union(_result_case) {
        servers: Servers,
        @"error": Error,
        pub const _union_desc = .{
            .servers = fd(1, .{ .SubMessage = {} }),
            .@"error" = fd(2, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .result = fd(null, .{ .OneOf = result_union }),
    };

    pub const Servers = struct {
        servers: ArrayList(i32),

        pub const _desc_table = .{
            .servers = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Error = struct {
        reason: Reason = @enumFromInt(0),

        pub const _desc_table = .{
            .reason = fd(1, .{ .Varint = .Simple }),
        };

        pub const Reason = enum(i32) {
            UNKNOWN = 0,
            NO_RESULT = 1,
            FLOOD = 2,
            INVALID_ACCOUNT = 3,
            _,
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
