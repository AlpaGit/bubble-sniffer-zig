// Code generated by protoc-gen-zig
///! package com.ankama.dofus.server.game.protocol.treasure.hunt
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
/// import package com.ankama.dofus.server.game.protocol.common
const com_ankama_dofus_server_game_protocol_common = @import("../common.pb.zig");

pub const TreasureHuntType = enum(i32) {
    CLASSIC = 0,
    PORTAL = 1,
    LEGENDARY = 2,
    _,
};

pub const TreasureHuntLegendaryRequest = struct {
    legendary_id: i32 = 0,

    pub const _desc_table = .{
        .legendary_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TreasureHuntDigRequest = struct {
    quest_type: TreasureHuntType = @enumFromInt(0),

    pub const _desc_table = .{
        .quest_type = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TreasureHuntFlagRequest = struct {
    quest_type: TreasureHuntType = @enumFromInt(0),
    index: i32 = 0,

    pub const _desc_table = .{
        .quest_type = fd(1, .{ .Varint = .Simple }),
        .index = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TreasureHuntFlagRemoveRequest = struct {
    quest_type: TreasureHuntType = @enumFromInt(0),
    index: i32 = 0,

    pub const _desc_table = .{
        .quest_type = fd(1, .{ .Varint = .Simple }),
        .index = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TreasureHuntGiveUpRequest = struct {
    quest_type: TreasureHuntType = @enumFromInt(0),

    pub const _desc_table = .{
        .quest_type = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PortalUseRequest = struct {
    portal_id: i32 = 0,

    pub const _desc_table = .{
        .portal_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TreasureHuntLegendaryEvent = struct {
    available_legendary_ids: ArrayList(i32),

    pub const _desc_table = .{
        .available_legendary_ids = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TreasureHuntAnswerEvent = struct {
    quest_type: TreasureHuntType = @enumFromInt(0),
    result: Result = @enumFromInt(0),

    pub const _desc_table = .{
        .quest_type = fd(1, .{ .Varint = .Simple }),
        .result = fd(2, .{ .Varint = .Simple }),
    };

    pub const Result = enum(i32) {
        ERROR_UNDEFINED = 0,
        ERROR_NO_QUEST_FOUND = 1,
        ERROR_ALREADY_HAVE_QUEST = 2,
        ERROR_NOT_AVAILABLE = 3,
        ERROR_DAILY_LIMIT_EXCEEDED = 4,
        OK = 5,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TreasureHuntEvent = struct {
    quest_type: TreasureHuntType = @enumFromInt(0),
    start_map_id: i64 = 0,
    known_steps: ArrayList(TreasureHuntStep),
    total_step_count: i32 = 0,
    current_check_point: i32 = 0,
    total_check_point: i32 = 0,
    available_retry_count: i32 = 0,
    flags: ArrayList(TreasureHuntFlag),

    pub const _desc_table = .{
        .quest_type = fd(1, .{ .Varint = .Simple }),
        .start_map_id = fd(2, .{ .Varint = .Simple }),
        .known_steps = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .total_step_count = fd(4, .{ .Varint = .Simple }),
        .current_check_point = fd(5, .{ .Varint = .Simple }),
        .total_check_point = fd(6, .{ .Varint = .Simple }),
        .available_retry_count = fd(7, .{ .Varint = .Simple }),
        .flags = fd(8, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const TreasureHuntStep = struct {
        step: ?step_union,

        pub const _step_case = enum {
            follow_direction_to_poi,
            follow_direction_to_hint,
            follow_direction,
            fight,
            dig,
        };
        pub const step_union = union(_step_case) {
            follow_direction_to_poi: FollowDirectionToPOI,
            follow_direction_to_hint: FollowDirectionToHint,
            follow_direction: FollowDirection,
            fight: Fight,
            dig: Dig,
            pub const _union_desc = .{
                .follow_direction_to_poi = fd(1, .{ .SubMessage = {} }),
                .follow_direction_to_hint = fd(2, .{ .SubMessage = {} }),
                .follow_direction = fd(3, .{ .SubMessage = {} }),
                .fight = fd(4, .{ .SubMessage = {} }),
                .dig = fd(5, .{ .SubMessage = {} }),
            };
        };

        pub const _desc_table = .{
            .step = fd(null, .{ .OneOf = step_union }),
        };

        pub const FollowDirectionToPOI = struct {
            direction: com_ankama_dofus_server_game_protocol_common.Direction = @enumFromInt(0),
            poi_label_id: i32 = 0,

            pub const _desc_table = .{
                .direction = fd(1, .{ .Varint = .Simple }),
                .poi_label_id = fd(2, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const FollowDirectionToHint = struct {
            direction: com_ankama_dofus_server_game_protocol_common.Direction = @enumFromInt(0),
            npc_id: i32 = 0,

            pub const _desc_table = .{
                .direction = fd(1, .{ .Varint = .Simple }),
                .npc_id = fd(2, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const FollowDirection = struct {
            direction: com_ankama_dofus_server_game_protocol_common.Direction = @enumFromInt(0),
            map_count: i32 = 0,

            pub const _desc_table = .{
                .direction = fd(1, .{ .Varint = .Simple }),
                .map_count = fd(2, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const Fight = struct {
            pub const _desc_table = .{};

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const Dig = struct {
            pub const _desc_table = .{};

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const TreasureHuntFlag = struct {
        map_id: i64 = 0,
        state: FlagState = @enumFromInt(0),

        pub const _desc_table = .{
            .map_id = fd(1, .{ .Varint = .Simple }),
            .state = fd(2, .{ .Varint = .Simple }),
        };

        pub const FlagState = enum(i32) {
            UNKNOWN = 0,
            OK = 1,
            WRONG = 2,
            _,
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TreasureHuntFinishedEvent = struct {
    quest_type: TreasureHuntType = @enumFromInt(0),

    pub const _desc_table = .{
        .quest_type = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TreasureHuntDigAnswerEvent = struct {
    quest_type: TreasureHuntType = @enumFromInt(0),
    result: DigResult = @enumFromInt(0),
    wrong_flag_count: ?i32 = null,

    pub const _desc_table = .{
        .quest_type = fd(1, .{ .Varint = .Simple }),
        .result = fd(2, .{ .Varint = .Simple }),
        .wrong_flag_count = fd(3, .{ .Varint = .Simple }),
    };

    pub const DigResult = enum(i32) {
        ERROR_UNDEFINED = 0,
        NEW_HINT = 1,
        FINISHED = 2,
        WRONG = 3,
        LOST = 4,
        ERROR_IMPOSSIBLE = 5,
        WRONG_AND_YOU_KNOW_IT = 6,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TreasureHuntFlagAnswerEvent = struct {
    quest_type: TreasureHuntType = @enumFromInt(0),
    result: FlagResult = @enumFromInt(0),
    index: i32 = 0,

    pub const _desc_table = .{
        .quest_type = fd(1, .{ .Varint = .Simple }),
        .result = fd(2, .{ .Varint = .Simple }),
        .index = fd(3, .{ .Varint = .Simple }),
    };

    pub const FlagResult = enum(i32) {
        ERROR_UNDEFINED = 0,
        OK = 1,
        WRONG = 2,
        TOO_MANY = 3,
        ERROR_IMPOSSIBLE = 4,
        WRONG_INDEX = 5,
        SAME_MAP = 6,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
