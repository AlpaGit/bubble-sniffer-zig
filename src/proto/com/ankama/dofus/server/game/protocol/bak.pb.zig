// Code generated by protoc-gen-zig
///! package com.ankama.dofus.server.game.protocol.bak
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;

pub const BidAction = enum(i32) {
    BID_INVALID_ACTION = 0,
    BID_CONSUME_BUFF = 1,
    BID_CANCEL = 2,
    BID_CREATE_KAMA = 3,
    BID_CREATE_OGRINE = 4,
    BID_BUY_KAMA = 5,
    BID_BUY_OGRINE = 6,
    _,
};

pub const BufferInformation = struct {
    buffer_id: i64 = 0,
    buffer_amount: i64 = 0,

    pub const _desc_table = .{
        .buffer_id = fd(1, .{ .Varint = .Simple }),
        .buffer_amount = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BakBufferListRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BakBufferListEvent = struct {
    buffers: ArrayList(BufferInformation),

    pub const _desc_table = .{
        .buffers = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BakConsumeBufferRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BakCancelBidRequest = struct {
    bid_id: i64 = 0,
    bid_cancellation_type: BidCancellationType = @enumFromInt(0),

    pub const _desc_table = .{
        .bid_id = fd(1, .{ .Varint = .Simple }),
        .bid_cancellation_type = fd(2, .{ .Varint = .Simple }),
    };

    pub const BidCancellationType = enum(i32) {
        UNKNOWN_TYPE = 0,
        CLASSIC_TYPE = 1,
        FRAUD_TYPE = 2,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BakActionRequest = struct {
    kamas: i64 = 0,
    ogrines: i64 = 0,
    rate: i32 = 0,
    bid_action: BidAction = @enumFromInt(0),

    pub const _desc_table = .{
        .kamas = fd(1, .{ .Varint = .Simple }),
        .ogrines = fd(2, .{ .Varint = .Simple }),
        .rate = fd(3, .{ .Varint = .Simple }),
        .bid_action = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BakActionEvent = struct {
    kamas: i64 = 0,
    amount: i64 = 0,
    rate: i32 = 0,
    bid_action: BidAction = @enumFromInt(0),
    transaction_uuid: ManagedString = .Empty,

    pub const _desc_table = .{
        .kamas = fd(1, .{ .Varint = .Simple }),
        .amount = fd(2, .{ .Varint = .Simple }),
        .rate = fd(3, .{ .Varint = .Simple }),
        .bid_action = fd(4, .{ .Varint = .Simple }),
        .transaction_uuid = fd(5, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BakTransactionValidationRequest = struct {
    transaction_uuid: ManagedString = .Empty,

    pub const _desc_table = .{
        .transaction_uuid = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BakTransactionValidationEvent = struct {
    bid_action: BidAction = @enumFromInt(0),
    result: BidValidation = @enumFromInt(0),

    pub const _desc_table = .{
        .bid_action = fd(1, .{ .Varint = .Simple }),
        .result = fd(2, .{ .Varint = .Simple }),
    };

    pub const BidValidation = enum(i32) {
        BID_GENERIC_ERROR = 0,
        BID_BUFFER_OVERLOAD = 1,
        BID_OFFER_DOESNT_EXIST = 2,
        BID_OFFER_ALREADY_EXISTS = 3,
        BID_NOT_ENOUGH_KAMAS = 4,
        BID_NOT_ENOUGH_OGRINES = 5,
        BID_SERVER_MAINTENANCE = 6,
        BID_PLAYER_IN_DEBT = 7,
        BID_OFFER_IS_YOURS = 8,
        BID_VALIDATION_SUCCESS = 9,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BakBuyValidationEvent = struct {
    transaction_validation: ?BakTransactionValidationEvent = null,
    amount: i64 = 0,
    email: ManagedString = .Empty,

    pub const _desc_table = .{
        .transaction_validation = fd(1, .{ .SubMessage = {} }),
        .amount = fd(2, .{ .Varint = .Simple }),
        .email = fd(3, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BakApiTokenRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BakApiKeyEvent = struct {
    token: ManagedString = .Empty,

    pub const _desc_table = .{
        .token = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BakShopTokenRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BakShopTokenEvent = struct {
    token: ManagedString = .Empty,

    pub const _desc_table = .{
        .token = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
