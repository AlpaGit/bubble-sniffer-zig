// Code generated by protoc-gen-zig
///! package com.ankama.dofus.server.game.protocol.fight
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
/// import package com.ankama.dofus.server.game.protocol.common
const com_ankama_dofus_server_game_protocol_common = @import("common.pb.zig");

pub const FightTurnReadyRequest = struct {
    is_ready: bool = false,

    pub const _desc_table = .{
        .is_ready = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTurnFinishRequest = struct {
    is_afk: bool = false,

    pub const _desc_table = .{
        .is_afk = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightJoinRunningEvent = struct {
    effects: ArrayList(com_ankama_dofus_server_game_protocol_common.FightRemovableEffectExtendedInformation),
    marks: ArrayList(com_ankama_dofus_server_game_protocol_common.FightMark),
    game_turn: i32 = 0,
    fight_start: i32 = 0,
    fx_trigger_counts: ArrayList(com_ankama_dofus_server_game_protocol_common.FightEffectTriggerCount),
    @"resume": ?FightResume = null,

    pub const _desc_table = .{
        .effects = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .marks = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .game_turn = fd(3, .{ .Varint = .Simple }),
        .fight_start = fd(4, .{ .Varint = .Simple }),
        .fx_trigger_counts = fd(5, .{ .List = .{ .SubMessage = {} } }),
        .@"resume" = fd(6, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightEndEvent = struct {
    duration: i32 = 0,
    reward_rate: i32 = 0,
    loot_share_limit_malus: i32 = 0,
    results: ArrayList(com_ankama_dofus_server_game_protocol_common.FightResultListEntry),
    named_party_teams_outcomes: ArrayList(com_ankama_dofus_server_game_protocol_common.NamedPartyTeamWithOutcome),
    budget: ?i32 = null,

    pub const _desc_table = .{
        .duration = fd(1, .{ .Varint = .Simple }),
        .reward_rate = fd(2, .{ .Varint = .Simple }),
        .loot_share_limit_malus = fd(3, .{ .Varint = .Simple }),
        .results = fd(4, .{ .List = .{ .SubMessage = {} } }),
        .named_party_teams_outcomes = fd(5, .{ .List = .{ .SubMessage = {} } }),
        .budget = fd(6, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightStatisticsEvent = struct {
    damage_done: i32 = 0,
    damage_taken: i32 = 0,
    blocked_damage: i32 = 0,
    applied_shield: i32 = 0,
    heal_done: i32 = 0,
    heal_taken: i32 = 0,
    kill_count: i32 = 0,

    pub const _desc_table = .{
        .damage_done = fd(1, .{ .Varint = .Simple }),
        .damage_taken = fd(2, .{ .Varint = .Simple }),
        .blocked_damage = fd(3, .{ .Varint = .Simple }),
        .applied_shield = fd(4, .{ .Varint = .Simple }),
        .heal_done = fd(5, .{ .Varint = .Simple }),
        .heal_taken = fd(6, .{ .Varint = .Simple }),
        .kill_count = fd(7, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightNewRoundEvent = struct {
    round_number: i32 = 0,

    pub const _desc_table = .{
        .round_number = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTurnListEvent = struct {
    ids: ArrayList(i64),
    slain: ArrayList(i64),

    pub const _desc_table = .{
        .ids = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
        .slain = fd(2, .{ .PackedList = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTurnEvent = struct {
    character_id: i64 = 0,
    base_time: i32 = 0,
    extra_time: i32 = 0,
    remaining_time: ?i32 = null,

    pub const _desc_table = .{
        .character_id = fd(1, .{ .Varint = .Simple }),
        .base_time = fd(2, .{ .Varint = .Simple }),
        .extra_time = fd(3, .{ .Varint = .Simple }),
        .remaining_time = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightNewWaveEvent = struct {
    wave_id: i32 = 0,
    team: com_ankama_dofus_server_game_protocol_common.Team = @enumFromInt(0),
    turn_left_before_next_wave: i32 = 0,

    pub const _desc_table = .{
        .wave_id = fd(1, .{ .Varint = .Simple }),
        .team = fd(2, .{ .Varint = .Simple }),
        .turn_left_before_next_wave = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTurnStartPlayingEvent = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightPauseEvent = struct {
    is_paused: bool = false,

    pub const _desc_table = .{
        .is_paused = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightScenarioEvent = struct {
    scenarios: ArrayList(ScenarioEntity),

    pub const _desc_table = .{
        .scenarios = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const ScenarioEntity = struct {
        actor_id: i64 = 0,
        scenario_id: i32 = 0,

        pub const _desc_table = .{
            .actor_id = fd(1, .{ .Varint = .Simple }),
            .scenario_id = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightSlaveSwitchContextEvent = struct {
    master_id: i64 = 0,
    slave_id: i64 = 0,
    slave_turn: i32 = 0,
    slave_spells: ArrayList(com_ankama_dofus_server_game_protocol_common.SpellItem),
    slave_stats: ?com_ankama_dofus_server_game_protocol_common.CharacterCharacteristics = null,
    shortcuts: ArrayList(com_ankama_dofus_server_game_protocol_common.Shortcut),

    pub const _desc_table = .{
        .master_id = fd(1, .{ .Varint = .Simple }),
        .slave_id = fd(2, .{ .Varint = .Simple }),
        .slave_turn = fd(3, .{ .Varint = .Simple }),
        .slave_spells = fd(4, .{ .List = .{ .SubMessage = {} } }),
        .slave_stats = fd(5, .{ .SubMessage = {} }),
        .shortcuts = fd(6, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightSlaveNoLongerControlledEvent = struct {
    master_id: i64 = 0,
    slave_id: i64 = 0,

    pub const _desc_table = .{
        .master_id = fd(1, .{ .Varint = .Simple }),
        .slave_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightRefreshCharacterStatsEvent = struct {
    fighter_id: i64 = 0,
    stats: ?com_ankama_dofus_server_game_protocol_common.FightCharacteristics = null,

    pub const _desc_table = .{
        .fighter_id = fd(1, .{ .Varint = .Simple }),
        .stats = fd(2, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightIsTurnReadyEvent = struct {
    character_id: i64 = 0,

    pub const _desc_table = .{
        .character_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightSynchronizeEvent = struct {
    fighters: ArrayList(com_ankama_dofus_server_game_protocol_common.ActorPositionInformation),

    pub const _desc_table = .{
        .fighters = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTurnEndEvent = struct {
    character_id: i64 = 0,

    pub const _desc_table = .{
        .character_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightFighterShowEvent = struct {
    information: ?com_ankama_dofus_server_game_protocol_common.ActorPositionInformation = null,
    static_pose: bool = false,

    pub const _desc_table = .{
        .information = fd(1, .{ .SubMessage = {} }),
        .static_pose = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightFighterRefreshEvent = struct {
    information: ?com_ankama_dofus_server_game_protocol_common.ActorPositionInformation = null,

    pub const _desc_table = .{
        .information = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightChallengeJoinRefuseEvent = struct {
    player_id: i64 = 0,
    reason: FighterRefusedReason = @enumFromInt(0),

    pub const _desc_table = .{
        .player_id = fd(1, .{ .Varint = .Simple }),
        .reason = fd(2, .{ .Varint = .Simple }),
    };

    pub const FighterRefusedReason = enum(i32) {
        FIGHTER_REFUSED = 0,
        FIGHTER_ACCEPTED = 1,
        CHALLENGE_FULL = 2,
        TEAM_FULL = 3,
        WRONG_ALIGNMENT = 4,
        WRONG_GUILD = 5,
        TOO_LATE = 6,
        MUTANT_REFUSED = 7,
        WRONG_MAP = 8,
        JUST_RESPAWNED = 9,
        IM_OCCUPIED = 10,
        OPPONENT_OCCUPIED = 11,
        FIGHT_MYSELF = 12,
        INSUFFICIENT_RIGHTS = 13,
        MEMBER_ACCOUNT_NEEDED = 14,
        OPPONENT_NOT_MEMBER = 15,
        TEAM_LIMITED_BY_MAIN_CHARACTER = 16,
        MULTI_ACCOUNT_NOT_ALLOWED = 17,
        GHOST_REFUSED = 18,
        WRONG_ALLIANCE = 19,
        AVA_ZONE = 20,
        ENTITY_REFUSED = 21,
        NOT_ENOUGH_ROOM = 22,
        GUEST_ACCOUNT = 23,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightResume = struct {
    spells_cool_down: ArrayList(com_ankama_dofus_server_game_protocol_common.FightSpellCoolDown),
    summon_count: i32 = 0,
    bomb_count: i32 = 0,
    slaves_information: ArrayList(com_ankama_dofus_server_game_protocol_common.FightResumeSlaves),

    pub const _desc_table = .{
        .spells_cool_down = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .summon_count = fd(2, .{ .Varint = .Simple }),
        .bomb_count = fd(3, .{ .Varint = .Simple }),
        .slaves_information = fd(4, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightMapInformationResponse = struct {
    map_id: i64 = 0,
    fight_map_id: i64 = 0,
    fight_start_positions: ?com_ankama_dofus_server_game_protocol_common.FightStartingPositions = null,

    pub const _desc_table = .{
        .map_id = fd(1, .{ .Varint = .Simple }),
        .fight_map_id = fd(2, .{ .Varint = .Simple }),
        .fight_start_positions = fd(3, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
