// Code generated by protoc-gen-zig
///! package com.ankama.dofus.server.game.protocol.context
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
/// import package com.ankama.dofus.server.game.protocol.common
const com_ankama_dofus_server_game_protocol_common = @import("common.pb.zig");

pub const ContextCreationRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContextReadyRequest = struct {
    map_id: i64 = 0,

    pub const _desc_table = .{
        .map_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContextQuitRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContextKickRequest = struct {
    target_id: i64 = 0,

    pub const _desc_table = .{
        .target_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ShowCellRequest = struct {
    cell_id: i32 = 0,

    pub const _desc_table = .{
        .cell_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContextCreationEvent = struct {
    context: GameContext = @enumFromInt(0),

    pub const _desc_table = .{
        .context = fd(1, .{ .Varint = .Simple }),
    };

    pub const GameContext = enum(i32) {
        ROLE_PLAY = 0,
        FIGHT = 1,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContextDestroyEvent = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContextRemoveElementEvent = struct {
    element_id: i64 = 0,

    pub const _desc_table = .{
        .element_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContextRemoveElementsEvent = struct {
    element_id: ArrayList(i64),

    pub const _desc_table = .{
        .element_id = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContextRefreshEntityLookEvent = struct {
    entity_id: i64 = 0,
    look: ?com_ankama_dofus_server_game_protocol_common.EntityLook = null,

    pub const _desc_table = .{
        .entity_id = fd(1, .{ .Varint = .Simple }),
        .look = fd(2, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const EntitiesDispositionEvent = struct {
    dispositions: ArrayList(com_ankama_dofus_server_game_protocol_common.EntityDisposition),

    pub const _desc_table = .{
        .dispositions = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const EntityDispositionErrorEvent = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MonsterBoosts = struct {
    id: i32 = 0,
    xp_boost: i32 = 0,
    drop_boost: i32 = 0,

    pub const _desc_table = .{
        .id = fd(1, .{ .Varint = .Simple }),
        .xp_boost = fd(2, .{ .Varint = .Simple }),
        .drop_boost = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RefreshMonsterBoostsEvent = struct {
    monster_boosts: ArrayList(MonsterBoosts),
    family_boosts: ArrayList(MonsterBoosts),

    pub const _desc_table = .{
        .monster_boosts = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .family_boosts = fd(2, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ShowCellEvent = struct {
    source_id: i64 = 0,
    cell_id: i32 = 0,

    pub const _desc_table = .{
        .source_id = fd(1, .{ .Varint = .Simple }),
        .cell_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
