// Code generated by protoc-gen-zig
///! package com.ankama.dofus.server.game.protocol.common
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;

pub const DelayedActionType = enum(i32) {
    DISCONNECT = 0,
    OBJECT_USE = 1,
    JOIN_CHARACTER = 2,
    AGGRESSION_IMMUNE = 3,
    _,
};

pub const AllianceRelation = enum(i32) {
    ALLIANCE_RELATION_NONE = 0,
    ALLIANCE_RELATION_MINE = 1,
    ALLIANCE_RELATION_DEF = 2,
    ALLIANCE_RELATION_ATT = 3,
    ALLIANCE_RELATION_NEUTRAL = 4,
    ALLIANCE_RELATION_ALLY = 5,
    ALLIANCE_RELATION_ENEMY = 6,
    _,
};

pub const ChallengeMod = enum(i32) {
    CHALLENGE_CHOICE = 0,
    CHALLENGE_RANDOM = 1,
    _,
};

pub const ChallengeBonus = enum(i32) {
    CHALLENGE_EXPERIENCE_BONUS = 0,
    CHALLENGE_DROP_BONUS = 1,
    _,
};

pub const CharacterState = enum(i32) {
    NOT_CONNECTED = 0,
    IN_ROLE_PLAY = 1,
    IN_FIGHT = 2,
    UNKNOWN_STATE = 3,
    _,
};

pub const Alignment = enum(i32) {
    UNKNOWN = 0,
    WITHOUT = 1,
    NEUTRAL = 2,
    ANGEL = 3,
    EVIL = 4,
    _,
};

pub const Gender = enum(i32) {
    MALE = 0,
    FEMALE = 1,
    _,
};

pub const Hierarchy = enum(i32) {
    ROLE_UNAVAILABLE = 0,
    ROLE_PLAYER = 1,
    ROLE_MODERATOR = 2,
    ROLE_GAME_MASTER_PADAWAN = 3,
    ROLE_GAME_MASTER = 4,
    ROLE_ADMIN = 5,
    ROLE_UNKNOWN_SPECIAL_USER = 6,
    _,
};

pub const AttackableStatus = enum(i32) {
    NON_ATTACKABLE = 0,
    PVP_ENABLED_ATTACKABLE = 1,
    PVP_ENABLED_NON_ATTACKABLE = 2,
    AVA_ENABLED_ATTACKABLE = 3,
    AVA_ENABLED_NON_ATTACKABLE = 4,
    AVA_DISQUALIFIED = 5,
    AVA_PREQUALIFIED_ATTACKABLE = 6,
    _,
};

pub const Restriction = enum(i32) {
    CANNOT_BE_ATTACKED = 0,
    CANNOT_BE_CHALLENGED = 1,
    CANNOT_TRADE = 2,
    CANNOT_BE_ATTACKED_BY_MUTANT = 3,
    CANNOT_RUN = 4,
    FORCE_SLOW_WALK = 5,
    CANNOT_MINIMIZE = 6,
    CANNOT_MOVE = 7,
    CANNOT_ATTACK = 8,
    CANNOT_CHALLENGE = 9,
    CANNOT_EXCHANGE = 10,
    CANNOT_ATTACK_AS_MUTANT = 11,
    CANNOT_CHAT = 12,
    CANNOT_USE_OBJECT = 13,
    CANNOT_USE_TAX_COLLECTOR = 14,
    CANNOT_USE_INTERACTIVE = 15,
    CANNOT_SPEAK_TO_NPC = 16,
    CANNOT_CHANGE_ZONE = 17,
    CANNOT_ATTACK_MONSTER = 18,
    _,
};

pub const DialogType = enum(i32) {
    DIALOG_BOOK = 0,
    DIALOG_DIALOG = 1,
    DIALOG_LOCKABLE = 2,
    DIALOG_PURCHASABLE = 3,
    DIALOG_GUILD_INVITATION = 4,
    DIALOG_GUILD_CREATE = 5,
    DIALOG_GUILD_RENAME = 6,
    DIALOG_MARRIAGE = 7,
    DIALOG_DUNGEON_MEETING = 8,
    DIALOG_SPELL_FORGET = 9,
    DIALOG_TELEPORTER = 10,
    DIALOG_EXCHANGE = 11,
    DIALOG_ALLIANCE_INVITATION = 12,
    DIALOG_ALLIANCE_CREATE = 13,
    DIALOG_ALLIANCE_RENAME = 14,
    DIALOG_HAVENBAG_MEETING = 15,
    _,
};

pub const ExchangeType = enum(i32) {
    NPC_SHOP = 0,
    PLAYER_TRADE = 1,
    NPC_TRADE = 2,
    CRAFT = 3,
    STORAGE = 4,
    SHOP_STOCK = 5,
    TAX_COLLECTOR = 6,
    NPC_MODIFY_TRADE = 7,
    BIDHOUSE_SELL = 8,
    BIDHOUSE_BUY = 9,
    MULTICRAFT_CRAFTER = 10,
    MULTICRAFT_CUSTOMER = 11,
    JOB_INDEX = 12,
    MOUNT = 13,
    MOUNT_STABLE = 14,
    NPC_RESURECT_PET = 15,
    NPC_TRADE_DRAGOTURKEY = 16,
    REALESTATE_HOUSE = 17,
    REALESTATE_FARM = 18,
    RUNES_TRADE = 19,
    RECYCLE_TRADE = 20,
    BANK = 21,
    TRASHBIN = 22,
    ALLIANCE_PRISM = 23,
    HAVENBAG = 24,
    NPC_TRADE_SEEMYOOL = 25,
    NPC_TRADE_RHINEETLE = 26,
    EVOLUTIVE_OBJECT_ELEMENTARY_RECYCLE = 27,
    NPC_RIDE_CAPABILITY_TRADE = 28,
    GUILD_CHEST = 29,
    _,
};

pub const FightType = enum(i32) {
    FIGHT_TYPE_CHALLENGE = 0,
    FIGHT_TYPE_AGGRESSION = 1,
    FIGHT_TYPE_PvMA = 2,
    FIGHT_TYPE_MXvM = 3,
    FIGHT_TYPE_PvM = 4,
    FIGHT_TYPE_PvT = 5,
    FIGHT_TYPE_PvMU = 6,
    FIGHT_TYPE_PVP_ARENA = 7,
    FIGHT_TYPE_KOH = 8,
    FIGHT_TYPE_PvPr = 9,
    FIGHT_TYPE_BREACH = 10,
    _,
};

pub const TeamType = enum(i32) {
    TEAM_TYPE_PLAYER = 0,
    TEAM_TYPE_MONSTER = 1,
    TEAM_TYPE_MUTANT = 2,
    TEAM_TYPE_TAX_COLLECTOR = 3,
    TEAM_TYPE_BAD_PLAYER = 4,
    TEAM_TYPE_PRISM = 5,
    _,
};

pub const FightOption = enum(i32) {
    FIGHT_OPTION_SET_SECRET = 0,
    FIGHT_OPTION_SET_TO_PARTY_ONLY = 1,
    FIGHT_OPTION_SET_CLOSED = 2,
    FIGHT_OPTION_ASK_FOR_HELP = 3,
    _,
};

pub const FightOutcome = enum(i32) {
    RESULT_LOST = 0,
    RESULT_DRAW = 1,
    RESULT_VICTORY = 2,
    RESULT_TAX = 3,
    RESULT_DEFENDER_GROUP = 4,
    _,
};

pub const FightInvisibilityState = enum(i32) {
    INVISIBLE = 0,
    DETECTED = 1,
    VISIBLE = 2,
    _,
};

pub const Team = enum(i32) {
    TEAM_CHALLENGER = 0,
    TEAM_DEFENDER = 1,
    TEAM_SPECTATOR = 2,
    TEAM_NEUTRAL = 3,
    _,
};

pub const ShortcutBar = enum(i32) {
    GENERAL_SHORTCUT_BAR = 0,
    SPELL_SHORTCUT_BAR = 1,
    _,
};

pub const PresetType = enum(i32) {
    CHARACTER = 0,
    FORGETTABLE_SPELL = 1,
    _,
};

pub const Direction = enum(i32) {
    DIRECTION_EAST = 0,
    DIRECTION_SOUTH_EAST = 1,
    DIRECTION_SOUTH = 2,
    DIRECTION_SOUTH_WEST = 3,
    DIRECTION_WEST = 4,
    DIRECTION_NORTH_WEST = 5,
    DIRECTION_NORTH = 6,
    DIRECTION_NORTH_EAST = 7,
    _,
};

pub const ObjectError = enum(i32) {
    INVENTORY_FULL = 0,
    CANNOT_EQUIP_TWICE = 1,
    NOT_TRADABLE = 2,
    CANNOT_DROP = 3,
    CANNOT_DROP_NO_PLACE = 4,
    CANNOT_DESTROY = 5,
    LEVEL_TOO_LOW = 6,
    LIVING_OBJECT_REFUSED_FOOD = 7,
    CANNOT_UNEQUIP = 8,
    CANNOT_EQUIP_HERE = 9,
    CRITERIONS = 10,
    SYMBIOTIC_OBJECT_ERROR = 11,
    EVOLUTIVE_OBJECT_REFUSED_FOOD = 12,
    _,
};

pub const ObjectOrigin = enum(i32) {
    ORIGIN_UNDEFINED = 0,
    ORIGIN_QUEST = 1,
    _,
};

pub const SocialRecruitmentType = enum(i32) {
    DISABLED = 0,
    AUTOMATIC = 1,
    MANUAL = 2,
    _,
};

pub const SocialApplicationState = enum(i32) {
    APPLICATION_ADDED = 0,
    APPLICATION_DELETED = 1,
    APPLICATION_UPDATED = 2,
    _,
};

pub const ServerType = enum(i32) {
    UNDEFINED = 0,
    CLASSICAL = 1,
    KOLIZEUM = 2,
    TOURNAMENT = 3,
    EPIC = 4,
    TEMPORIS = 5,
    _,
};

pub const SocialGroupOperationResult = enum(i32) {
    SOCIAL_GROUP_OPERATION_OK = 0,
    SOCIAL_GROUP_ERROR_NAME_INVALID = 1,
    SOCIAL_GROUP_ERROR_ALREADY_IN_GROUP = 2,
    SOCIAL_GROUP_ERROR_NAME_ALREADY_EXISTS = 3,
    SOCIAL_GROUP_ERROR_LEAVE = 4,
    SOCIAL_GROUP_ERROR_CANCEL = 5,
    SOCIAL_GROUP_ERROR_REQUIREMENT_UNMET = 6,
    SOCIAL_GROUP_ERROR_EMBLEM_INVALID = 7,
    SOCIAL_GROUP_ERROR_TAG_INVALID = 8,
    SOCIAL_GROUP_ERROR_TAG_ALREADY_EXISTS = 9,
    SOCIAL_GROUP_ERROR_UNKNOWN = 10,
    _,
};

pub const SocialNoticeError = enum(i32) {
    SOCIAL_NOTICE_UNKNOWN_ERROR = 0,
    SOCIAL_NOTICE_INVALID_RIGHTS = 1,
    SOCIAL_NOTICE_COOLDOWN = 2,
    _,
};

pub const SocialGroupInvitationState = enum(i32) {
    SOCIAL_GROUP_INVITATION_FAILED = 0,
    SOCIAL_GROUP_INVITATION_SENT = 1,
    SOCIAL_GROUP_INVITATION_CANCELED = 2,
    SOCIAL_GROUP_INVITATION_OK = 3,
    _,
};

pub const TaxCollectorState = enum(i32) {
    STATE_COLLECTING = 0,
    STATE_WAITING_FOR_HELP = 1,
    STATE_FIGHTING = 2,
    _,
};

pub const MountCharacteristic = enum(i32) {
    ENERGY = 0,
    SERENITY = 1,
    STAMINA = 2,
    LOVE = 3,
    MATURITY = 4,
    TIREDNESS = 5,
    CARRIER = 6,
    FERTILE = 7,
    PREGNANT = 8,
    _,
};

pub const SpellModifierActionType = enum(i32) {
    ACTION_INVALID = 0,
    ACTION_BOOST = 1,
    ACTION_REMOVE_BOOST = 2,
    ACTION_SET = 3,
    _,
};

pub const SpellModifierType = enum(i32) {
    INVALID_MODIFICATION = 0,
    RANGE = 1,
    DAMAGE = 2,
    BASE_DAMAGE = 3,
    HEAL_BONUS = 4,
    AP_COST = 5,
    CAST_INTERVAL = 6,
    CRITICAL_HIT_BONUS = 7,
    CAST_LINE = 8,
    LOS = 9,
    MAX_CAST_PER_TURN = 10,
    MAX_CAST_PER_TARGET = 11,
    RANGE_MAX = 12,
    RANGE_MIN = 13,
    OCCUPIED_CELL = 14,
    FREE_CELL = 15,
    VISIBLE_TARGET = 16,
    PORTAL_FREE_CELL = 17,
    PORTAL_PROJECTION = 18,
    _,
};

pub const RealEstateOrder = enum(i32) {
    PRICE_ASC = 0,
    PRICE_DSC = 1,
    _,
};

pub const AccountTag = struct {
    nickname: ManagedString = .Empty,
    tag: ManagedString = .Empty,

    pub const _desc_table = .{
        .nickname = fd(1, .String),
        .tag = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ActorPositionInformation = struct {
    actor_id: i64 = 0,
    disposition: ?EntityDisposition = null,
    actor_information: ?ActorInformation = null,

    pub const _desc_table = .{
        .actor_id = fd(1, .{ .Varint = .Simple }),
        .disposition = fd(2, .{ .SubMessage = {} }),
        .actor_information = fd(3, .{ .SubMessage = {} }),
    };

    pub const ActorInformation = struct {
        look: ?EntityLook = null,
        information: ?information_union,

        pub const _information_case = enum {
            role_play_actor,
            fighter,
        };
        pub const information_union = union(_information_case) {
            role_play_actor: RolePlayActor,
            fighter: FightFighterInformation,
            pub const _union_desc = .{
                .role_play_actor = fd(2, .{ .SubMessage = {} }),
                .fighter = fd(3, .{ .SubMessage = {} }),
            };
        };

        pub const _desc_table = .{
            .look = fd(1, .{ .SubMessage = {} }),
            .information = fd(null, .{ .OneOf = information_union }),
        };

        pub const RolePlayActor = struct {
            actor: ?actor_union,

            pub const _actor_case = enum {
                named_actor,
                tax_collector_actor,
                monster_group_actor,
                npc_actor,
                prism_actor,
                portal_actor,
                treasure_hunt_npc_id,
            };
            pub const actor_union = union(_actor_case) {
                named_actor: NamedActor,
                tax_collector_actor: TaxCollectorActor,
                monster_group_actor: MonsterGroupActor,
                npc_actor: NpcStaticInformation,
                prism_actor: PrismInformation,
                portal_actor: PortalInformation,
                treasure_hunt_npc_id: i32,
                pub const _union_desc = .{
                    .named_actor = fd(4, .{ .SubMessage = {} }),
                    .tax_collector_actor = fd(5, .{ .SubMessage = {} }),
                    .monster_group_actor = fd(6, .{ .SubMessage = {} }),
                    .npc_actor = fd(7, .{ .SubMessage = {} }),
                    .prism_actor = fd(8, .{ .SubMessage = {} }),
                    .portal_actor = fd(9, .{ .SubMessage = {} }),
                    .treasure_hunt_npc_id = fd(10, .{ .Varint = .Simple }),
                };
            };

            pub const _desc_table = .{
                .actor = fd(null, .{ .OneOf = actor_union }),
            };

            pub const NamedActor = struct {
                name: ManagedString = .Empty,
                actor: ?actor_union,

                pub const _actor_case = enum {
                    humanoid_information,
                    mount_information,
                };
                pub const actor_union = union(_actor_case) {
                    humanoid_information: Humanoid,
                    mount_information: Mount,
                    pub const _union_desc = .{
                        .humanoid_information = fd(2, .{ .SubMessage = {} }),
                        .mount_information = fd(3, .{ .SubMessage = {} }),
                    };
                };

                pub const _desc_table = .{
                    .name = fd(1, .String),
                    .actor = fd(null, .{ .OneOf = actor_union }),
                };

                pub const Humanoid = struct {
                    restrictions: ArrayList(Restriction),
                    gender: Gender = @enumFromInt(0),
                    options: ArrayList(HumanOption),
                    account_id: i64 = 0,
                    alignment_information: ?AlignmentInformation = null,
                    mutant_information: ?MutantInformation = null,

                    pub const _desc_table = .{
                        .restrictions = fd(1, .{ .List = .{ .Varint = .Simple } }),
                        .gender = fd(2, .{ .Varint = .Simple }),
                        .options = fd(3, .{ .List = .{ .SubMessage = {} } }),
                        .account_id = fd(4, .{ .Varint = .Simple }),
                        .alignment_information = fd(5, .{ .SubMessage = {} }),
                        .mutant_information = fd(6, .{ .SubMessage = {} }),
                    };

                    pub const HumanOption = struct {
                        option: ?option_union,

                        pub const _option_case = enum {
                            followers,
                            guild_information,
                            alliance_information,
                            emote_option,
                            title_option,
                            ornament_option,
                            object_use_option,
                            skill_use_option,
                            speed_multiplier,
                        };
                        pub const option_union = union(_option_case) {
                            followers: FollowingCharactersOption,
                            guild_information: GuildInformation,
                            alliance_information: AllianceOption,
                            emote_option: EmoteOption,
                            title_option: TitleOption,
                            ornament_option: OrnamentOption,
                            object_use_option: ObjectUseOption,
                            skill_use_option: SkillUseOption,
                            speed_multiplier: i32,
                            pub const _union_desc = .{
                                .followers = fd(3, .{ .SubMessage = {} }),
                                .guild_information = fd(4, .{ .SubMessage = {} }),
                                .alliance_information = fd(5, .{ .SubMessage = {} }),
                                .emote_option = fd(6, .{ .SubMessage = {} }),
                                .title_option = fd(7, .{ .SubMessage = {} }),
                                .ornament_option = fd(8, .{ .SubMessage = {} }),
                                .object_use_option = fd(9, .{ .SubMessage = {} }),
                                .skill_use_option = fd(10, .{ .SubMessage = {} }),
                                .speed_multiplier = fd(11, .{ .Varint = .Simple }),
                            };
                        };

                        pub const _desc_table = .{
                            .option = fd(null, .{ .OneOf = option_union }),
                        };

                        pub const FollowingCharactersOption = struct {
                            following_characters_looks: ArrayList(IndexedEntityLook),

                            pub const _desc_table = .{
                                .following_characters_looks = fd(1, .{ .List = .{ .SubMessage = {} } }),
                            };

                            pub const IndexedEntityLook = struct {
                                look: ?EntityLook = null,
                                index: i32 = 0,

                                pub const _desc_table = .{
                                    .look = fd(1, .{ .SubMessage = {} }),
                                    .index = fd(2, .{ .Varint = .Simple }),
                                };

                                pub usingnamespace protobuf.MessageMixins(@This());
                            };

                            pub usingnamespace protobuf.MessageMixins(@This());
                        };

                        pub const AllianceOption = struct {
                            alliance_information: ?AllianceInformation = null,
                            attackable_status: AttackableStatus = @enumFromInt(0),

                            pub const _desc_table = .{
                                .alliance_information = fd(1, .{ .SubMessage = {} }),
                                .attackable_status = fd(2, .{ .Varint = .Simple }),
                            };

                            pub usingnamespace protobuf.MessageMixins(@This());
                        };

                        pub const EmoteOption = struct {
                            emote_id: i32 = 0,
                            emote_start_time: ManagedString = .Empty,

                            pub const _desc_table = .{
                                .emote_id = fd(1, .{ .Varint = .Simple }),
                                .emote_start_time = fd(2, .String),
                            };

                            pub usingnamespace protobuf.MessageMixins(@This());
                        };

                        pub const TitleOption = struct {
                            title_id: ?i32 = null,
                            title_parameter: ?ManagedString = null,

                            pub const _desc_table = .{
                                .title_id = fd(1, .{ .Varint = .Simple }),
                                .title_parameter = fd(2, .String),
                            };

                            pub usingnamespace protobuf.MessageMixins(@This());
                        };

                        pub const OrnamentOption = struct {
                            player_level: i32 = 0,
                            ornament_id: ?i32 = null,
                            league_id: ?i32 = null,
                            ladder_position: ?i32 = null,

                            pub const _desc_table = .{
                                .player_level = fd(2, .{ .Varint = .Simple }),
                                .ornament_id = fd(1, .{ .Varint = .Simple }),
                                .league_id = fd(3, .{ .Varint = .Simple }),
                                .ladder_position = fd(4, .{ .Varint = .Simple }),
                            };

                            pub usingnamespace protobuf.MessageMixins(@This());
                        };

                        pub const ObjectUseOption = struct {
                            delayed_action_type: DelayedActionType = @enumFromInt(0),
                            end_delay: ManagedString = .Empty,
                            object_gid: i32 = 0,

                            pub const _desc_table = .{
                                .delayed_action_type = fd(1, .{ .Varint = .Simple }),
                                .end_delay = fd(2, .String),
                                .object_gid = fd(3, .{ .Varint = .Simple }),
                            };

                            pub usingnamespace protobuf.MessageMixins(@This());
                        };

                        pub const SkillUseOption = struct {
                            element_id: i32 = 0,
                            skill_id: i32 = 0,
                            skill_end_time: ManagedString = .Empty,

                            pub const _desc_table = .{
                                .element_id = fd(1, .{ .Varint = .Simple }),
                                .skill_id = fd(2, .{ .Varint = .Simple }),
                                .skill_end_time = fd(3, .String),
                            };

                            pub usingnamespace protobuf.MessageMixins(@This());
                        };

                        pub usingnamespace protobuf.MessageMixins(@This());
                    };

                    pub const MutantInformation = struct {
                        monster_id: i32 = 0,
                        power_level: i32 = 0,

                        pub const _desc_table = .{
                            .monster_id = fd(1, .{ .Varint = .Simple }),
                            .power_level = fd(2, .{ .Varint = .Simple }),
                        };

                        pub usingnamespace protobuf.MessageMixins(@This());
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub const Mount = struct {
                    owner_name: ManagedString = .Empty,
                    level: i32 = 0,

                    pub const _desc_table = .{
                        .owner_name = fd(1, .String),
                        .level = fd(2, .{ .Varint = .Simple }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub const TaxCollectorActor = struct {
                identification: ?TaxCollectorStaticInformation = null,
                attack: i32 = 0,

                pub const _desc_table = .{
                    .identification = fd(1, .{ .SubMessage = {} }),
                    .attack = fd(2, .{ .Varint = .Simple }),
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub const MonsterGroupActor = struct {
                identification: ?MonsterGroupStaticInformation = null,
                loot_share: i32 = 0,
                alignment: Alignment = @enumFromInt(0),
                wave_information: ?WaveInformation = null,

                pub const _desc_table = .{
                    .identification = fd(1, .{ .SubMessage = {} }),
                    .loot_share = fd(2, .{ .Varint = .Simple }),
                    .alignment = fd(3, .{ .Varint = .Simple }),
                    .wave_information = fd(4, .{ .SubMessage = {} }),
                };

                pub const WaveInformation = struct {
                    alternatives: ArrayList(MonsterGroupStaticInformation),
                    wave_count: ?i32 = null,

                    pub const _desc_table = .{
                        .alternatives = fd(2, .{ .List = .{ .SubMessage = {} } }),
                        .wave_count = fd(1, .{ .Varint = .Simple }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub const NpcStaticInformation = struct {
                npc_id: i32 = 0,
                gender: Gender = @enumFromInt(0),
                special_artwork_id: i32 = 0,
                quests: ?Quests = null,

                pub const _desc_table = .{
                    .npc_id = fd(1, .{ .Varint = .Simple }),
                    .gender = fd(2, .{ .Varint = .Simple }),
                    .special_artwork_id = fd(3, .{ .Varint = .Simple }),
                    .quests = fd(4, .{ .SubMessage = {} }),
                };

                pub const Quests = struct {
                    quests_to_valid: ArrayList(i32),
                    quests_to_start: ArrayList(i32),

                    pub const _desc_table = .{
                        .quests_to_valid = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
                        .quests_to_start = fd(2, .{ .PackedList = .{ .Varint = .Simple } }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const FightFighterInformation = struct {
            spawn_information: ?SpawnInformation = null,
            wave: i32 = 0,
            stats: ?FightCharacteristics = null,
            previous_positions: ArrayList(i32),
            fighter_information: ?fighter_information_union,

            pub const _fighter_information_case = enum {
                named_fighter,
                ai_fighter,
                entity_fighter,
            };
            pub const fighter_information_union = union(_fighter_information_case) {
                named_fighter: NamedFighterInformation,
                ai_fighter: AIFighterInformation,
                entity_fighter: EntityFighterInformation,
                pub const _union_desc = .{
                    .named_fighter = fd(5, .{ .SubMessage = {} }),
                    .ai_fighter = fd(6, .{ .SubMessage = {} }),
                    .entity_fighter = fd(7, .{ .SubMessage = {} }),
                };
            };

            pub const _desc_table = .{
                .spawn_information = fd(1, .{ .SubMessage = {} }),
                .wave = fd(2, .{ .Varint = .Simple }),
                .stats = fd(3, .{ .SubMessage = {} }),
                .previous_positions = fd(4, .{ .PackedList = .{ .Varint = .Simple } }),
                .fighter_information = fd(null, .{ .OneOf = fighter_information_union }),
            };

            pub const NamedFighterInformation = struct {
                name: ManagedString = .Empty,
                status: ?CharacterStatus = null,
                league_id: i32 = 0,
                ladder_position: i32 = 0,
                hidden_in_pre_fight: bool = false,
                fighter_information: ?fighter_information_union,

                pub const _fighter_information_case = enum {
                    character_information,
                    mutant_information,
                };
                pub const fighter_information_union = union(_fighter_information_case) {
                    character_information: FightCharacterInformation,
                    mutant_information: FightMutantInformation,
                    pub const _union_desc = .{
                        .character_information = fd(6, .{ .SubMessage = {} }),
                        .mutant_information = fd(7, .{ .SubMessage = {} }),
                    };
                };

                pub const _desc_table = .{
                    .name = fd(1, .String),
                    .status = fd(2, .{ .SubMessage = {} }),
                    .league_id = fd(3, .{ .Varint = .Simple }),
                    .ladder_position = fd(4, .{ .Varint = .Simple }),
                    .hidden_in_pre_fight = fd(5, .{ .Varint = .Simple }),
                    .fighter_information = fd(null, .{ .OneOf = fighter_information_union }),
                };

                pub const FightCharacterInformation = struct {
                    level: i32 = 0,
                    alignment_information: ?AlignmentInformation = null,
                    breed_id: i32 = 0,
                    gender: Gender = @enumFromInt(0),

                    pub const _desc_table = .{
                        .level = fd(1, .{ .Varint = .Simple }),
                        .alignment_information = fd(2, .{ .SubMessage = {} }),
                        .breed_id = fd(3, .{ .Varint = .Simple }),
                        .gender = fd(4, .{ .Varint = .Simple }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub const FightMutantInformation = struct {
                    power_level: i32 = 0,

                    pub const _desc_table = .{
                        .power_level = fd(1, .{ .Varint = .Simple }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub const AIFighterInformation = struct {
                ai_fighter_information: ?ai_fighter_information_union,

                pub const _ai_fighter_information_case = enum {
                    monster_fighter_information,
                    tax_collector_information,
                };
                pub const ai_fighter_information_union = union(_ai_fighter_information_case) {
                    monster_fighter_information: MonsterFighter,
                    tax_collector_information: TaxCollectorFighter,
                    pub const _union_desc = .{
                        .monster_fighter_information = fd(1, .{ .SubMessage = {} }),
                        .tax_collector_information = fd(2, .{ .SubMessage = {} }),
                    };
                };

                pub const _desc_table = .{
                    .ai_fighter_information = fd(null, .{ .OneOf = ai_fighter_information_union }),
                };

                pub const MonsterFighter = struct {
                    monster_gid: i32 = 0,
                    creature_grade: i32 = 0,
                    creature_level: i32 = 0,
                    alignment_information: ?AlignmentInformation = null,

                    pub const _desc_table = .{
                        .monster_gid = fd(1, .{ .Varint = .Simple }),
                        .creature_grade = fd(2, .{ .Varint = .Simple }),
                        .creature_level = fd(3, .{ .Varint = .Simple }),
                        .alignment_information = fd(4, .{ .SubMessage = {} }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub const TaxCollectorFighter = struct {
                    first_name_id: i32 = 0,
                    last_name_id: i32 = 0,

                    pub const _desc_table = .{
                        .first_name_id = fd(1, .{ .Varint = .Simple }),
                        .last_name_id = fd(2, .{ .Varint = .Simple }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub const EntityFighterInformation = struct {
                entity_model_id: i32 = 0,
                level: i32 = 0,
                master_id: i64 = 0,

                pub const _desc_table = .{
                    .entity_model_id = fd(1, .{ .Varint = .Simple }),
                    .level = fd(2, .{ .Varint = .Simple }),
                    .master_id = fd(3, .{ .Varint = .Simple }),
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SpawnInformation = struct {
    team: Team = @enumFromInt(0),
    alive: bool = false,
    position: ?ActorPositionInformation = null,

    pub const _desc_table = .{
        .team = fd(1, .{ .Varint = .Simple }),
        .alive = fd(2, .{ .Varint = .Simple }),
        .position = fd(3, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AllianceInformation = struct {
    uid: ManagedString = .Empty,
    tag: ManagedString = .Empty,
    name: ?ManagedString = null,
    emblem: ?SocialEmblem = null,
    card_information: ?AllianceCardInformation = null,

    pub const _desc_table = .{
        .uid = fd(1, .String),
        .tag = fd(2, .String),
        .name = fd(3, .String),
        .emblem = fd(4, .{ .SubMessage = {} }),
        .card_information = fd(5, .{ .SubMessage = {} }),
    };

    pub const AllianceCardInformation = struct {
        creation_date: i64 = 0,
        members_number: i32 = 0,
        subarea_number: i32 = 0,
        tax_collector_number: i32 = 0,
        recruitment: ?AllianceRecruitmentInformation = null,

        pub const _desc_table = .{
            .creation_date = fd(1, .{ .Varint = .Simple }),
            .members_number = fd(2, .{ .Varint = .Simple }),
            .subarea_number = fd(3, .{ .Varint = .Simple }),
            .tax_collector_number = fd(4, .{ .Varint = .Simple }),
            .recruitment = fd(5, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BreachBranch = struct {
    room: i32 = 0,
    element: i32 = 0,
    bosses: ArrayList(MonsterInGroupInformation),
    map_id: i64 = 0,
    score: i32 = 0,
    relative_score: i32 = 0,
    monsters: ArrayList(MonsterInGroupInformation),
    extended_information: ?ExtendedBreachBranch = null,

    pub const _desc_table = .{
        .room = fd(1, .{ .Varint = .Simple }),
        .element = fd(2, .{ .Varint = .Simple }),
        .bosses = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .map_id = fd(4, .{ .Varint = .Simple }),
        .score = fd(5, .{ .Varint = .Simple }),
        .relative_score = fd(6, .{ .Varint = .Simple }),
        .monsters = fd(7, .{ .List = .{ .SubMessage = {} } }),
        .extended_information = fd(8, .{ .SubMessage = {} }),
    };

    pub const ExtendedBreachBranch = struct {
        rewards: ArrayList(BreachReward),
        modifier: i32 = 0,
        price: i32 = 0,
        unlock_price: ?i32 = null,

        pub const _desc_table = .{
            .rewards = fd(1, .{ .List = .{ .SubMessage = {} } }),
            .modifier = fd(2, .{ .Varint = .Simple }),
            .price = fd(3, .{ .Varint = .Simple }),
            .unlock_price = fd(4, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BreachReward = struct {
    id: i32 = 0,
    buy_locks: ArrayList(BreachRewardLock),
    buy_criterion: ManagedString = .Empty,
    remaining_quantity: i32 = 0,
    price: i32 = 0,

    pub const _desc_table = .{
        .id = fd(1, .{ .Varint = .Simple }),
        .buy_locks = fd(2, .{ .List = .{ .Varint = .Simple } }),
        .buy_criterion = fd(3, .String),
        .remaining_quantity = fd(4, .{ .Varint = .Simple }),
        .price = fd(5, .{ .Varint = .Simple }),
    };

    pub const BreachRewardLock = enum(i32) {
        BREACH_REWARD_LOCK_OWNER = 0,
        BREACH_REWARD_LOCK_FIGHTER = 1,
        BREACH_REWARD_LOCK_RESOURCES = 2,
        BREACH_REWARD_LOCK_CRITERION = 3,
        BREACH_REWARD_LOCK_USELESS = 4,
        BREACH_REWARD_MAX_PURCHASE_REACHED = 5,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Challenge = struct {
    challenge_id: i32 = 0,
    targets: ArrayList(ChallengeTarget),
    drop_bonus: i32 = 0,
    xp_bonus: i32 = 0,
    state: ChallengeState = @enumFromInt(0),

    pub const _desc_table = .{
        .challenge_id = fd(1, .{ .Varint = .Simple }),
        .targets = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .drop_bonus = fd(3, .{ .Varint = .Simple }),
        .xp_bonus = fd(4, .{ .Varint = .Simple }),
        .state = fd(5, .{ .Varint = .Simple }),
    };

    pub const ChallengeState = enum(i32) {
        CHALLENGE_COMPLETED = 0,
        CHALLENGE_FAILED = 1,
        CHALLENGE_RUNNING = 2,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ChallengeTarget = struct {
    target_id: i64 = 0,
    target_cell: i32 = 0,
    attackers_id: ArrayList(i64),

    pub const _desc_table = .{
        .target_id = fd(1, .{ .Varint = .Simple }),
        .target_cell = fd(2, .{ .Varint = .Simple }),
        .attackers_id = fd(3, .{ .PackedList = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Character = struct {
    id: i64 = 0,
    complement: ?complement_union,

    pub const _complement_case = enum {
        character_basic_information,
        character_remodeling_information,
    };
    pub const complement_union = union(_complement_case) {
        character_basic_information: CharacterBasicInformation,
        character_remodeling_information: CharacterRemodelingInformation,
        pub const _union_desc = .{
            .character_basic_information = fd(2, .{ .SubMessage = {} }),
            .character_remodeling_information = fd(3, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .id = fd(1, .{ .Varint = .Simple }),
        .complement = fd(null, .{ .OneOf = complement_union }),
    };

    pub const CharacterBasicInformation = struct {
        name: ManagedString = .Empty,
        level: ?i32 = null,
        complement: ?complement_union,

        pub const _complement_case = enum {
            character_look,
            rank,
            social_member,
        };
        pub const complement_union = union(_complement_case) {
            character_look: CharacterLook,
            rank: RankInformation,
            social_member: SocialMember,
            pub const _union_desc = .{
                .character_look = fd(4, .{ .SubMessage = {} }),
                .rank = fd(5, .{ .SubMessage = {} }),
                .social_member = fd(6, .{ .SubMessage = {} }),
            };
        };

        pub const _desc_table = .{
            .name = fd(1, .String),
            .level = fd(2, .{ .Varint = .Simple }),
            .complement = fd(null, .{ .OneOf = complement_union }),
        };

        pub const SocialMember = struct {
            breed_id: i32 = 0,
            gender: Gender = @enumFromInt(0),
            state: CharacterState = @enumFromInt(0),
            hours_since_last_connection: i64 = 0,
            account_id: i64 = 0,
            status: ?CharacterStatus = null,
            rank_id: i32 = 0,
            enrollment_date: i64 = 0,
            ava_role_id: ?i32 = null,
            guild_member: ?GuildMember = null,

            pub const _desc_table = .{
                .breed_id = fd(1, .{ .Varint = .Simple }),
                .gender = fd(2, .{ .Varint = .Simple }),
                .state = fd(3, .{ .Varint = .Simple }),
                .hours_since_last_connection = fd(4, .{ .Varint = .Simple }),
                .account_id = fd(5, .{ .Varint = .Simple }),
                .status = fd(6, .{ .SubMessage = {} }),
                .rank_id = fd(7, .{ .Varint = .Simple }),
                .enrollment_date = fd(8, .{ .Varint = .Simple }),
                .ava_role_id = fd(9, .{ .Varint = .Simple }),
                .guild_member = fd(10, .{ .SubMessage = {} }),
            };

            pub const GuildMember = struct {
                given_experience: i64 = 0,
                experience_given_percent: i32 = 0,
                alignment: Alignment = @enumFromInt(0),
                mood_smiley_id: i32 = 0,
                achievement_points: i32 = 0,
                haven_bag_shared: bool = false,
                note: ?PlayerNote = null,

                pub const _desc_table = .{
                    .given_experience = fd(1, .{ .Varint = .Simple }),
                    .experience_given_percent = fd(2, .{ .Varint = .Simple }),
                    .alignment = fd(3, .{ .Varint = .Simple }),
                    .mood_smiley_id = fd(4, .{ .Varint = .Simple }),
                    .achievement_points = fd(5, .{ .Varint = .Simple }),
                    .haven_bag_shared = fd(6, .{ .Varint = .Simple }),
                    .note = fd(7, .{ .SubMessage = {} }),
                };

                pub const PlayerNote = struct {
                    content: ManagedString = .Empty,
                    last_edit_date: i64 = 0,

                    pub const _desc_table = .{
                        .content = fd(1, .String),
                        .last_edit_date = fd(2, .{ .Varint = .Simple }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const CharacterLook = struct {
            look: ?EntityLook = null,
            breed_id: i32 = 0,
            complement: ?complement_union,

            pub const _complement_case = enum {
                guild_information,
                alliance_information,
                grade,
                base_information,
            };
            pub const complement_union = union(_complement_case) {
                guild_information: GuildInformation,
                alliance_information: AllianceInformation,
                grade: i32,
                base_information: CharacterBaseInformation,
                pub const _union_desc = .{
                    .guild_information = fd(3, .{ .SubMessage = {} }),
                    .alliance_information = fd(4, .{ .SubMessage = {} }),
                    .grade = fd(5, .{ .Varint = .Simple }),
                    .base_information = fd(6, .{ .SubMessage = {} }),
                };
            };

            pub const _desc_table = .{
                .look = fd(1, .{ .SubMessage = {} }),
                .breed_id = fd(2, .{ .Varint = .Simple }),
                .complement = fd(null, .{ .OneOf = complement_union }),
            };

            pub const CharacterBaseInformation = struct {
                gender: Gender = @enumFromInt(0),
                complement: ?complement_union,

                pub const _complement_case = enum {
                    epic_information,
                    party_member_information,
                    party_invitation_member_information,
                };
                pub const complement_union = union(_complement_case) {
                    epic_information: CharacterEpicInformation,
                    party_member_information: PartyMemberInformation,
                    party_invitation_member_information: PartyInvitationMemberInformation,
                    pub const _union_desc = .{
                        .epic_information = fd(2, .{ .SubMessage = {} }),
                        .party_member_information = fd(3, .{ .SubMessage = {} }),
                        .party_invitation_member_information = fd(4, .{ .SubMessage = {} }),
                    };
                };

                pub const _desc_table = .{
                    .gender = fd(1, .{ .Varint = .Simple }),
                    .complement = fd(null, .{ .OneOf = complement_union }),
                };

                pub const CharacterEpicInformation = struct {
                    death_state: EpicDeathState = @enumFromInt(0),
                    death_count: i32 = 0,
                    death_max_level: i32 = 0,

                    pub const _desc_table = .{
                        .death_state = fd(1, .{ .Varint = .Simple }),
                        .death_count = fd(2, .{ .Varint = .Simple }),
                        .death_max_level = fd(3, .{ .Varint = .Simple }),
                    };

                    pub const EpicDeathState = enum(i32) {
                        DEATH_STATE_ALIVE = 0,
                        DEATH_STATE_DEAD = 1,
                        DEATH_STATE_WAITING_CONFIRMATION = 2,
                        _,
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub const PartyMemberInformation = struct {
                    commons_information: ?PartyUpdateCommonsInformation = null,
                    initiative: i32 = 0,
                    alignment: Alignment = @enumFromInt(0),
                    coordinates: ?MapExtendedCoordinates = null,
                    status: ?CharacterStatus = null,
                    entities: ArrayList(PartyEntity),
                    rank: ?i32 = null,

                    pub const _desc_table = .{
                        .commons_information = fd(1, .{ .SubMessage = {} }),
                        .initiative = fd(2, .{ .Varint = .Simple }),
                        .alignment = fd(3, .{ .Varint = .Simple }),
                        .coordinates = fd(4, .{ .SubMessage = {} }),
                        .status = fd(5, .{ .SubMessage = {} }),
                        .entities = fd(6, .{ .List = .{ .SubMessage = {} } }),
                        .rank = fd(7, .{ .Varint = .Simple }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub const PartyInvitationMemberInformation = struct {
                    coordinates: ?MapExtendedCoordinates = null,
                    entities: ArrayList(PartyEntity),

                    pub const _desc_table = .{
                        .coordinates = fd(1, .{ .SubMessage = {} }),
                        .entities = fd(2, .{ .List = .{ .SubMessage = {} } }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CharacterRemodelingInformation = struct {
    name: ManagedString = .Empty,
    breed_id: i32 = 0,
    gender: Gender = @enumFromInt(0),
    colors: ArrayList(i32),
    cosmeticId: i32 = 0,
    character_to_remodel_information: ?CharacterToRemodelInformation = null,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .breed_id = fd(2, .{ .Varint = .Simple }),
        .gender = fd(3, .{ .Varint = .Simple }),
        .colors = fd(4, .{ .PackedList = .{ .Varint = .Simple } }),
        .cosmeticId = fd(5, .{ .Varint = .Simple }),
        .character_to_remodel_information = fd(6, .{ .SubMessage = {} }),
    };

    pub const CharacterToRemodelInformation = struct {
        possible_change_mask: i32 = 0,
        mandatory_change_mask: i32 = 0,

        pub const _desc_table = .{
            .possible_change_mask = fd(1, .{ .Varint = .Simple }),
            .mandatory_change_mask = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PartyEntity = struct {
    index_id: i32 = 0,
    entity_model_id: i32 = 0,
    look: ?EntityLook = null,
    entity_member: ?EntityMember = null,

    pub const _desc_table = .{
        .index_id = fd(1, .{ .Varint = .Simple }),
        .entity_model_id = fd(2, .{ .Varint = .Simple }),
        .look = fd(3, .{ .SubMessage = {} }),
        .entity_member = fd(4, .{ .SubMessage = {} }),
    };

    pub const EntityMember = struct {
        initiative: i32 = 0,
        commons_information: ?PartyUpdateCommonsInformation = null,

        pub const _desc_table = .{
            .initiative = fd(1, .{ .Varint = .Simple }),
            .commons_information = fd(2, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PartyUpdateCommonsInformation = struct {
    life_point: i32 = 0,
    max_life_points: i32 = 0,
    prospecting: i32 = 0,
    regen_rate: i32 = 0,

    pub const _desc_table = .{
        .life_point = fd(1, .{ .Varint = .Simple }),
        .max_life_points = fd(2, .{ .Varint = .Simple }),
        .prospecting = fd(3, .{ .Varint = .Simple }),
        .regen_rate = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CharacterCharacteristic = struct {
    characteristic_id: i32 = 0,
    character_characteristic: ?character_characteristic_union,

    pub const _character_characteristic_case = enum {
        value,
        detailed,
        usable,
    };
    pub const character_characteristic_union = union(_character_characteristic_case) {
        value: CharacterCharacteristicValue,
        detailed: CharacterCharacteristicDetailed,
        usable: CharacterCharacteristicDetailedUsable,
        pub const _union_desc = .{
            .value = fd(2, .{ .SubMessage = {} }),
            .detailed = fd(3, .{ .SubMessage = {} }),
            .usable = fd(4, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .characteristic_id = fd(1, .{ .Varint = .Simple }),
        .character_characteristic = fd(null, .{ .OneOf = character_characteristic_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CharacterCharacteristicValue = struct {
    total: i64 = 0,

    pub const _desc_table = .{
        .total = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CharacterCharacteristicDetailed = struct {
    base: i32 = 0,
    additional: i32 = 0,
    objects_and_mount_bonus: i32 = 0,
    alignment_gift_bonus: i32 = 0,
    context_modification: i32 = 0,
    temporary: i32 = 0,

    pub const _desc_table = .{
        .base = fd(1, .{ .Varint = .Simple }),
        .additional = fd(2, .{ .Varint = .Simple }),
        .objects_and_mount_bonus = fd(3, .{ .Varint = .Simple }),
        .alignment_gift_bonus = fd(4, .{ .Varint = .Simple }),
        .context_modification = fd(5, .{ .Varint = .Simple }),
        .temporary = fd(6, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CharacterCharacteristicDetailedUsable = struct {
    base: i32 = 0,
    additional: i32 = 0,
    objects_and_mount_bonus: i32 = 0,
    alignment_gift_bonus: i32 = 0,
    context_modification: i32 = 0,
    used: i32 = 0,
    temporary: i32 = 0,

    pub const _desc_table = .{
        .base = fd(1, .{ .Varint = .Simple }),
        .additional = fd(2, .{ .Varint = .Simple }),
        .objects_and_mount_bonus = fd(3, .{ .Varint = .Simple }),
        .alignment_gift_bonus = fd(4, .{ .Varint = .Simple }),
        .context_modification = fd(5, .{ .Varint = .Simple }),
        .used = fd(6, .{ .Varint = .Simple }),
        .temporary = fd(7, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CharacterInformation = struct {
    character_id: i64 = 0,
    name: ManagedString = .Empty,
    breed_id: i32 = 0,
    gender: Gender = @enumFromInt(0),
    level: i32 = 0,
    account_id: i64 = 0,
    account_tag: ManagedString = .Empty,
    account_nickname: ManagedString = .Empty,
    status: ?CharacterStatus = null,

    pub const _desc_table = .{
        .character_id = fd(1, .{ .Varint = .Simple }),
        .name = fd(2, .String),
        .breed_id = fd(3, .{ .Varint = .Simple }),
        .gender = fd(4, .{ .Varint = .Simple }),
        .level = fd(5, .{ .Varint = .Simple }),
        .account_id = fd(6, .{ .Varint = .Simple }),
        .account_tag = fd(7, .String),
        .account_nickname = fd(8, .String),
        .status = fd(9, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CharacterStatus = struct {
    status: Status = @enumFromInt(0),
    message: ?ManagedString = null,

    pub const _desc_table = .{
        .status = fd(1, .{ .Varint = .Simple }),
        .message = fd(2, .String),
    };

    pub const Status = enum(i32) {
        STATUS_OFFLINE = 0,
        STATUS_AVAILABLE = 1,
        STATUS_IDLE = 2,
        STATUS_AFK = 3,
        STATUS_PRIVATE = 4,
        STATUS_SOLO = 5,
        STATUS_UNKNOWN = 6,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PlayerSearch = struct {
    player_search: ?player_search_union,

    pub const _player_search_case = enum {
        search_by_character_name,
        search_by_account,
    };
    pub const player_search_union = union(_player_search_case) {
        search_by_character_name: SearchByCharacterName,
        search_by_account: SearchByAccount,
        pub const _union_desc = .{
            .search_by_character_name = fd(1, .{ .SubMessage = {} }),
            .search_by_account = fd(2, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .player_search = fd(null, .{ .OneOf = player_search_union }),
    };

    pub const SearchByCharacterName = struct {
        name: ManagedString = .Empty,

        pub const _desc_table = .{
            .name = fd(1, .String),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const SearchByAccount = struct {
        name: ManagedString = .Empty,
        tag: ManagedString = .Empty,

        pub const _desc_table = .{
            .name = fd(1, .String),
            .tag = fd(2, .String),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AllianceMemberInformation = struct {
    information: ?Character = null,
    ava_role_id: i32 = 0,

    pub const _desc_table = .{
        .information = fd(1, .{ .SubMessage = {} }),
        .ava_role_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SocialApplicationInformation = struct {
    player_information: ?CharacterInformation = null,
    apply_text: ManagedString = .Empty,
    creation_date: i64 = 0,

    pub const _desc_table = .{
        .player_information = fd(1, .{ .SubMessage = {} }),
        .apply_text = fd(2, .String),
        .creation_date = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const CharacterCharacteristics = struct {
    experience: i64 = 0,
    experience_level_floor: i64 = 0,
    experience_next_level_floor: i64 = 0,
    experience_bonus_limit: i64 = 0,
    kamas: i64 = 0,
    alignment_information: ?AlignmentInformation = null,
    critical_hit_weapon: i32 = 0,
    characteristics: ArrayList(CharacterCharacteristic),
    spell_modifiers: ArrayList(SpellModifier),
    probation_time: i64 = 0,

    pub const _desc_table = .{
        .experience = fd(1, .{ .Varint = .Simple }),
        .experience_level_floor = fd(2, .{ .Varint = .Simple }),
        .experience_next_level_floor = fd(3, .{ .Varint = .Simple }),
        .experience_bonus_limit = fd(4, .{ .Varint = .Simple }),
        .kamas = fd(5, .{ .Varint = .Simple }),
        .alignment_information = fd(6, .{ .SubMessage = {} }),
        .critical_hit_weapon = fd(7, .{ .Varint = .Simple }),
        .characteristics = fd(8, .{ .List = .{ .SubMessage = {} } }),
        .spell_modifiers = fd(9, .{ .List = .{ .SubMessage = {} } }),
        .probation_time = fd(10, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AlignmentInformation = struct {
    alignment: Alignment = @enumFromInt(0),
    alignment_quest_number: i32 = 0,
    alignment_grade: i32 = 0,
    character_id: i64 = 0,
    character_level: i64 = 0,
    extended_information: ?AlignmentExtendedInformation = null,

    pub const _desc_table = .{
        .alignment = fd(1, .{ .Varint = .Simple }),
        .alignment_quest_number = fd(2, .{ .Varint = .Simple }),
        .alignment_grade = fd(3, .{ .Varint = .Simple }),
        .character_id = fd(4, .{ .Varint = .Simple }),
        .character_level = fd(5, .{ .Varint = .Simple }),
        .extended_information = fd(6, .{ .SubMessage = {} }),
    };

    pub const AlignmentExtendedInformation = struct {
        honor: i32 = 0,
        honor_grade_floor: i32 = 0,
        honor_next_grade_floor: i32 = 0,
        attackable: AttackableStatus = @enumFromInt(0),

        pub const _desc_table = .{
            .honor = fd(1, .{ .Varint = .Simple }),
            .honor_grade_floor = fd(2, .{ .Varint = .Simple }),
            .honor_next_grade_floor = fd(3, .{ .Varint = .Simple }),
            .attackable = fd(4, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const InteractiveElement = struct {
    element_id: i32 = 0,
    element_type_id: i32 = 0,
    enabled_skills: ArrayList(InteractiveElementSkill),
    disabled_skills: ArrayList(InteractiveElementSkill),
    on_current_map: bool = false,
    age_bonus: ?i32 = null,

    pub const _desc_table = .{
        .element_id = fd(1, .{ .Varint = .Simple }),
        .element_type_id = fd(2, .{ .Varint = .Simple }),
        .enabled_skills = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .disabled_skills = fd(4, .{ .List = .{ .SubMessage = {} } }),
        .on_current_map = fd(5, .{ .Varint = .Simple }),
        .age_bonus = fd(6, .{ .Varint = .Simple }),
    };

    pub const InteractiveElementSkill = struct {
        skill_id: i32 = 0,
        skill_instance_uid: i32 = 0,
        name_id: ?i32 = null,

        pub const _desc_table = .{
            .skill_id = fd(1, .{ .Varint = .Simple }),
            .skill_instance_uid = fd(2, .{ .Varint = .Simple }),
            .name_id = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const StatedElement = struct {
    element_id: i32 = 0,
    cell_id: i32 = 0,
    state: i32 = 0,
    on_current_map: bool = false,

    pub const _desc_table = .{
        .element_id = fd(1, .{ .Varint = .Simple }),
        .cell_id = fd(2, .{ .Varint = .Simple }),
        .state = fd(3, .{ .Varint = .Simple }),
        .on_current_map = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const EntityLook = struct {
    bones_id: i32 = 0,
    skins: ArrayList(i32),
    indexed_colors: ArrayList(i32),
    scales: ArrayList(i32),
    sub_entities: ArrayList(SubEntityInformation),

    pub const _desc_table = .{
        .bones_id = fd(1, .{ .Varint = .Simple }),
        .skins = fd(2, .{ .PackedList = .{ .Varint = .Simple } }),
        .indexed_colors = fd(3, .{ .PackedList = .{ .Varint = .Simple } }),
        .scales = fd(4, .{ .PackedList = .{ .Varint = .Simple } }),
        .sub_entities = fd(5, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SubEntityInformation = struct {
    binding_point_category: BindingPointCategoryEnum = @enumFromInt(0),
    binding_point_index: i32 = 0,
    sub_entity_look: ?EntityLook = null,

    pub const _desc_table = .{
        .binding_point_category = fd(1, .{ .Varint = .Simple }),
        .binding_point_index = fd(2, .{ .Varint = .Simple }),
        .sub_entity_look = fd(3, .{ .SubMessage = {} }),
    };

    pub const BindingPointCategoryEnum = enum(i32) {
        HOOK_POINT_CATEGORY_UNUSED = 0,
        HOOK_POINT_CATEGORY_PET = 1,
        HOOK_POINT_CATEGORY_MOUNT_DRIVER = 2,
        HOOK_POINT_CATEGORY_LIFTED_ENTITY = 3,
        HOOK_POINT_CATEGORY_BASE_BACKGROUND = 4,
        HOOK_POINT_CATEGORY_BASE_FOREGROUND = 6,
        HOOK_POINT_CATEGORY_UNDERWATER_BUBBLES = 7,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const EntityDisposition = struct {
    direction: Direction = @enumFromInt(0),
    entity_id: ?i64 = null,
    cell_id: ?i32 = null,
    carrying_character_id: ?i64 = null,

    pub const _desc_table = .{
        .direction = fd(3, .{ .Varint = .Simple }),
        .entity_id = fd(1, .{ .Varint = .Simple }),
        .cell_id = fd(2, .{ .Varint = .Simple }),
        .carrying_character_id = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NamedPartyTeam = struct {
    team: Team = @enumFromInt(0),
    party_name: ManagedString = .Empty,

    pub const _desc_table = .{
        .team = fd(1, .{ .Varint = .Simple }),
        .party_name = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SocialFightInformation = struct {
    fight_id: i32 = 0,
    fight_type: Type = @enumFromInt(0),
    map_id: i64 = 0,

    pub const _desc_table = .{
        .fight_id = fd(1, .{ .Varint = .Simple }),
        .fight_type = fd(2, .{ .Varint = .Simple }),
        .map_id = fd(3, .{ .Varint = .Simple }),
    };

    pub const Type = enum(i32) {
        TAX_COLLECTOR = 0,
        PRISM = 1,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SocialFight = struct {
    social_fight_info: ?SocialFightInformation = null,
    attackers: ArrayList(Character),
    defenders: ArrayList(Character),
    phase: ?FightPhaseInfo = null,

    pub const _desc_table = .{
        .social_fight_info = fd(1, .{ .SubMessage = {} }),
        .attackers = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .defenders = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .phase = fd(4, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightPhaseInfo = struct {
    phase: FightPhase = @enumFromInt(0),
    phase_end_timestamp: i64 = 0,

    pub const _desc_table = .{
        .phase = fd(1, .{ .Varint = .Simple }),
        .phase_end_timestamp = fd(2, .{ .Varint = .Simple }),
    };

    pub const FightPhase = enum(i32) {
        STARTED = 0,
        JOINING_PHASE = 1,
        POSITIONING_PHASE = 2,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightOptionsInformation = struct {
    is_secret: bool = false,
    is_restricted_to_party: bool = false,
    is_closed: bool = false,
    is_asking_for_help: bool = false,

    pub const _desc_table = .{
        .is_secret = fd(1, .{ .Varint = .Simple }),
        .is_restricted_to_party = fd(2, .{ .Varint = .Simple }),
        .is_closed = fd(3, .{ .Varint = .Simple }),
        .is_asking_for_help = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FighterLightInformation = struct {
    id: i64 = 0,
    wave: i32 = 0,
    level: i32 = 0,
    breed_id: i32 = 0,
    gender: Gender = @enumFromInt(0),
    alive: bool = false,
    fighter_info: ?fighter_info_union,

    pub const _fighter_info_case = enum {
        monster_information,
        entity_information,
        tax_collector_information,
        named_information,
    };
    pub const fighter_info_union = union(_fighter_info_case) {
        monster_information: FighterMonsterLightInformation,
        entity_information: FighterEntityLightInformation,
        tax_collector_information: FighterTaxCollectorLightInformation,
        named_information: FighterNamedLightInformation,
        pub const _union_desc = .{
            .monster_information = fd(7, .{ .SubMessage = {} }),
            .entity_information = fd(8, .{ .SubMessage = {} }),
            .tax_collector_information = fd(9, .{ .SubMessage = {} }),
            .named_information = fd(10, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .id = fd(1, .{ .Varint = .Simple }),
        .wave = fd(2, .{ .Varint = .Simple }),
        .level = fd(3, .{ .Varint = .Simple }),
        .breed_id = fd(4, .{ .Varint = .Simple }),
        .gender = fd(5, .{ .Varint = .Simple }),
        .alive = fd(6, .{ .Varint = .Simple }),
        .fighter_info = fd(null, .{ .OneOf = fighter_info_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FighterMonsterLightInformation = struct {
    monster_gid: i32 = 0,

    pub const _desc_table = .{
        .monster_gid = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FighterEntityLightInformation = struct {
    entity_model_id: i32 = 0,
    master_id: i64 = 0,

    pub const _desc_table = .{
        .entity_model_id = fd(1, .{ .Varint = .Simple }),
        .master_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FighterTaxCollectorLightInformation = struct {
    first_name_id: i32 = 0,
    last_name_id: i32 = 0,

    pub const _desc_table = .{
        .first_name_id = fd(1, .{ .Varint = .Simple }),
        .last_name_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FighterNamedLightInformation = struct {
    name: ManagedString = .Empty,

    pub const _desc_table = .{
        .name = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightCommonInformation = struct {
    fight_id: i32 = 0,
    type: FightType = @enumFromInt(0),
    teams_information: ArrayList(FightTeamInformation),
    teams_position: ArrayList(i32),
    teams_options: ArrayList(FightOptionsInformation),

    pub const _desc_table = .{
        .fight_id = fd(1, .{ .Varint = .Simple }),
        .type = fd(2, .{ .Varint = .Simple }),
        .teams_information = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .teams_position = fd(4, .{ .PackedList = .{ .Varint = .Simple } }),
        .teams_options = fd(5, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTeamInformation = struct {
    team: Team = @enumFromInt(0),
    leader_id: i64 = 0,
    side: Alignment = @enumFromInt(0),
    type: TeamType = @enumFromInt(0),
    waves: i32 = 0,
    team_information: ?team_information_union,

    pub const _team_information_case = enum {
        team_members,
        light_information,
    };
    pub const team_information_union = union(_team_information_case) {
        team_members: FightTeamMembersInformation,
        light_information: FightTeamLightInformation,
        pub const _union_desc = .{
            .team_members = fd(6, .{ .SubMessage = {} }),
            .light_information = fd(7, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .team = fd(1, .{ .Varint = .Simple }),
        .leader_id = fd(2, .{ .Varint = .Simple }),
        .side = fd(3, .{ .Varint = .Simple }),
        .type = fd(4, .{ .Varint = .Simple }),
        .waves = fd(5, .{ .Varint = .Simple }),
        .team_information = fd(null, .{ .OneOf = team_information_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightExternalInformation = struct {
    fight_id: i32 = 0,
    fight_type: FightType = @enumFromInt(0),
    fight_start: i64 = 0,
    fight_spectator_locked: bool = false,
    fight_teams_with_options: ArrayList(FightTeamsWithOptions),

    pub const _desc_table = .{
        .fight_id = fd(1, .{ .Varint = .Simple }),
        .fight_type = fd(2, .{ .Varint = .Simple }),
        .fight_start = fd(3, .{ .Varint = .Simple }),
        .fight_spectator_locked = fd(4, .{ .Varint = .Simple }),
        .fight_teams_with_options = fd(5, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const FightTeamsWithOptions = struct {
        fight_team: ?FightTeamInformation = null,
        fight_team_options: ?FightOptionsInformation = null,

        pub const _desc_table = .{
            .fight_team = fd(1, .{ .SubMessage = {} }),
            .fight_team_options = fd(2, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTeamLightInformation = struct {
    team_members_count: i32 = 0,
    average_level: i32 = 0,
    has_friend: bool = false,
    has_guild_member: bool = false,
    has_alliance_member: bool = false,
    has_group_member: bool = false,
    has_my_tax_collector: bool = false,

    pub const _desc_table = .{
        .team_members_count = fd(1, .{ .Varint = .Simple }),
        .average_level = fd(2, .{ .Varint = .Simple }),
        .has_friend = fd(3, .{ .Varint = .Simple }),
        .has_guild_member = fd(4, .{ .Varint = .Simple }),
        .has_alliance_member = fd(5, .{ .Varint = .Simple }),
        .has_group_member = fd(6, .{ .Varint = .Simple }),
        .has_my_tax_collector = fd(7, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTeamMembersInformation = struct {
    team_members: ArrayList(FightTeamMemberInformation),
    alliance_relation: ?AllianceRelation = null,

    pub const _desc_table = .{
        .team_members = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .alliance_relation = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTeamMemberInformation = struct {
    member_id: i64 = 0,
    information: ?information_union,

    pub const _information_case = enum {
        character_member,
        entity_member,
        monster_member,
        tax_collector_member,
    };
    pub const information_union = union(_information_case) {
        character_member: FightTeamMemberCharacter,
        entity_member: FightTeamMemberEntity,
        monster_member: FightTeamMemberMonster,
        tax_collector_member: FightTeamMemberTaxCollector,
        pub const _union_desc = .{
            .character_member = fd(2, .{ .SubMessage = {} }),
            .entity_member = fd(3, .{ .SubMessage = {} }),
            .monster_member = fd(4, .{ .SubMessage = {} }),
            .tax_collector_member = fd(5, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .member_id = fd(1, .{ .Varint = .Simple }),
        .information = fd(null, .{ .OneOf = information_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTeamMemberCharacter = struct {
    name: ManagedString = .Empty,
    level: i32 = 0,
    alliance_info: ?BasicAllianceInformation = null,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .level = fd(2, .{ .Varint = .Simple }),
        .alliance_info = fd(3, .{ .SubMessage = {} }),
    };

    pub const BasicAllianceInformation = struct {
        alliance_uid: ManagedString = .Empty,
        alliance_tag: ManagedString = .Empty,

        pub const _desc_table = .{
            .alliance_uid = fd(1, .String),
            .alliance_tag = fd(2, .String),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTeamMemberEntity = struct {
    entity_model_id: i32 = 0,
    level: i32 = 0,
    master_id: i64 = 0,

    pub const _desc_table = .{
        .entity_model_id = fd(1, .{ .Varint = .Simple }),
        .level = fd(2, .{ .Varint = .Simple }),
        .master_id = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTeamMemberMonster = struct {
    monster_id: i32 = 0,
    grade: i32 = 0,

    pub const _desc_table = .{
        .monster_id = fd(1, .{ .Varint = .Simple }),
        .grade = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTeamMemberTaxCollector = struct {
    first_name_id: i32 = 0,
    last_name_id: i32 = 0,
    group_id: i32 = 0,
    tax_collector_uid: ManagedString = .Empty,

    pub const _desc_table = .{
        .first_name_id = fd(1, .{ .Varint = .Simple }),
        .last_name_id = fd(2, .{ .Varint = .Simple }),
        .group_id = fd(3, .{ .Varint = .Simple }),
        .tax_collector_uid = fd(4, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightStartingPositions = struct {
    challengers_positions: ArrayList(i32),
    defenders_positions: ArrayList(i32),

    pub const _desc_table = .{
        .challengers_positions = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
        .defenders_positions = fd(2, .{ .PackedList = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightRemovableEffectExtendedInformation = struct {
    action_id: i32 = 0,
    source_id: i64 = 0,
    effect: ?FightRemovableEffect = null,

    pub const _desc_table = .{
        .action_id = fd(1, .{ .Varint = .Simple }),
        .source_id = fd(2, .{ .Varint = .Simple }),
        .effect = fd(3, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightRemovableEffect = struct {
    uid: i32 = 0,
    target_id: i64 = 0,
    turn_duration: i32 = 0,
    dissipation_state: EffectDissipationState = @enumFromInt(0),
    spell_id: i32 = 0,
    effect_id: i32 = 0,
    parent_boost_id: i32 = 0,
    effect: ?effect_union,

    pub const _effect_case = enum {
        temporary_boost_effect,
        temporary_spell_immunity_effect,
        triggered_effect,
    };
    pub const effect_union = union(_effect_case) {
        temporary_boost_effect: FightTemporaryBoostEffect,
        temporary_spell_immunity_effect: FightTemporarySpellImmunityEffect,
        triggered_effect: FightTriggeredEffect,
        pub const _union_desc = .{
            .temporary_boost_effect = fd(8, .{ .SubMessage = {} }),
            .temporary_spell_immunity_effect = fd(9, .{ .SubMessage = {} }),
            .triggered_effect = fd(10, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .uid = fd(1, .{ .Varint = .Simple }),
        .target_id = fd(2, .{ .Varint = .Simple }),
        .turn_duration = fd(3, .{ .Varint = .Simple }),
        .dissipation_state = fd(4, .{ .Varint = .Simple }),
        .spell_id = fd(5, .{ .Varint = .Simple }),
        .effect_id = fd(6, .{ .Varint = .Simple }),
        .parent_boost_id = fd(7, .{ .Varint = .Simple }),
        .effect = fd(null, .{ .OneOf = effect_union }),
    };

    pub const EffectDissipationState = enum(i32) {
        DISSIPATED = 0,
        DISSIPATED_BY_DEATH = 1,
        DISSIPATED_BY_STRONG_DISPEL = 2,
        REALLY_NOT_DISSIPATED = 3,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTemporaryBoostEffect = struct {
    delta: i32 = 0,
    complement: ?complement_union,

    pub const _complement_case = enum {
        boosted_spell_id,
        weapon_type_id,
        state_id,
        details,
    };
    pub const complement_union = union(_complement_case) {
        boosted_spell_id: i32,
        weapon_type_id: i32,
        state_id: i32,
        details: Details,
        pub const _union_desc = .{
            .boosted_spell_id = fd(2, .{ .Varint = .Simple }),
            .weapon_type_id = fd(3, .{ .Varint = .Simple }),
            .state_id = fd(4, .{ .Varint = .Simple }),
            .details = fd(5, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .delta = fd(1, .{ .Varint = .Simple }),
        .complement = fd(null, .{ .OneOf = complement_union }),
    };

    pub const Details = struct {
        first_param: i32 = 0,
        second_param: i32 = 0,
        third_param: i32 = 0,

        pub const _desc_table = .{
            .first_param = fd(1, .{ .Varint = .Simple }),
            .second_param = fd(2, .{ .Varint = .Simple }),
            .third_param = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTemporarySpellImmunityEffect = struct {
    immune_spell_id: i32 = 0,

    pub const _desc_table = .{
        .immune_spell_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightTriggeredEffect = struct {
    first_param: i32 = 0,
    second_param: i32 = 0,
    third_param: i32 = 0,
    delay: i32 = 0,

    pub const _desc_table = .{
        .first_param = fd(1, .{ .Varint = .Simple }),
        .second_param = fd(2, .{ .Varint = .Simple }),
        .third_param = fd(3, .{ .Varint = .Simple }),
        .delay = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightMark = struct {
    author_id: i64 = 0,
    team: Team = @enumFromInt(0),
    spell_id: i32 = 0,
    spell_level: i32 = 0,
    mark_id: i32 = 0,
    mark_type: MarkType = @enumFromInt(0),
    mark_impact_cell: i32 = 0,
    cells: ArrayList(MarkedCell),
    active: bool = false,

    pub const _desc_table = .{
        .author_id = fd(1, .{ .Varint = .Simple }),
        .team = fd(2, .{ .Varint = .Simple }),
        .spell_id = fd(3, .{ .Varint = .Simple }),
        .spell_level = fd(4, .{ .Varint = .Simple }),
        .mark_id = fd(5, .{ .Varint = .Simple }),
        .mark_type = fd(6, .{ .Varint = .Simple }),
        .mark_impact_cell = fd(7, .{ .Varint = .Simple }),
        .cells = fd(8, .{ .List = .{ .SubMessage = {} } }),
        .active = fd(9, .{ .Varint = .Simple }),
    };

    pub const MarkType = enum(i32) {
        GLYPH = 0,
        TRAP = 1,
        WALL = 2,
        PORTAL = 3,
        RUNE = 4,
        _,
    };

    pub const MarkedCell = struct {
        id: i32 = 0,
        zone_size: i32 = 0,
        color: i32 = 0,
        cells_type: MarkCellsType = @enumFromInt(0),

        pub const _desc_table = .{
            .id = fd(1, .{ .Varint = .Simple }),
            .zone_size = fd(2, .{ .Varint = .Simple }),
            .color = fd(3, .{ .Varint = .Simple }),
            .cells_type = fd(4, .{ .Varint = .Simple }),
        };

        pub const MarkCellsType = enum(i32) {
            CELLS_CIRCLE = 0,
            CELLS_CROSS = 1,
            CELLS_SQUARE = 2,
            _,
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightEffectTriggerCount = struct {
    effect_id: i32 = 0,
    target_id: i64 = 0,
    count: i32 = 0,

    pub const _desc_table = .{
        .effect_id = fd(1, .{ .Varint = .Simple }),
        .target_id = fd(2, .{ .Varint = .Simple }),
        .count = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightSpellCoolDown = struct {
    spell_id: i32 = 0,
    cool_down: i32 = 0,

    pub const _desc_table = .{
        .spell_id = fd(1, .{ .Varint = .Simple }),
        .cool_down = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightResumeSlaves = struct {
    slave_id: i64 = 0,
    spell_cool_downs: ArrayList(FightSpellCoolDown),
    summon_count: i32 = 0,
    bomb_count: i32 = 0,

    pub const _desc_table = .{
        .slave_id = fd(1, .{ .Varint = .Simple }),
        .spell_cool_downs = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .summon_count = fd(3, .{ .Varint = .Simple }),
        .bomb_count = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightResultListEntry = struct {
    outcome: FightOutcome = @enumFromInt(0),
    wave: i32 = 0,
    rewards: ?FightLoot = null,
    fighter_list_entry: ?FighterListEntry = null,

    pub const _desc_table = .{
        .outcome = fd(1, .{ .Varint = .Simple }),
        .wave = fd(2, .{ .Varint = .Simple }),
        .rewards = fd(3, .{ .SubMessage = {} }),
        .fighter_list_entry = fd(4, .{ .SubMessage = {} }),
    };

    pub const FightLoot = struct {
        objects: ArrayList(Object),
        kamas: i64 = 0,

        pub const _desc_table = .{
            .objects = fd(1, .{ .List = .{ .SubMessage = {} } }),
            .kamas = fd(2, .{ .Varint = .Simple }),
        };

        pub const Object = struct {
            id: i32 = 0,
            quantity: i32 = 0,
            priority_hint: i32 = 0,

            pub const _desc_table = .{
                .id = fd(1, .{ .Varint = .Simple }),
                .quantity = fd(2, .{ .Varint = .Simple }),
                .priority_hint = fd(3, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const FighterListEntry = struct {
        fighter_id: i64 = 0,
        alive: bool = false,
        complement: ?complement_union,

        pub const _complement_case = enum {
            player_list_entry,
            mutant_list_entry,
            tax_collector_list_entry,
        };
        pub const complement_union = union(_complement_case) {
            player_list_entry: PlayerListEntry,
            mutant_list_entry: MutantListEntry,
            tax_collector_list_entry: TaxCollectorListEntry,
            pub const _union_desc = .{
                .player_list_entry = fd(3, .{ .SubMessage = {} }),
                .mutant_list_entry = fd(4, .{ .SubMessage = {} }),
                .tax_collector_list_entry = fd(5, .{ .SubMessage = {} }),
            };
        };

        pub const _desc_table = .{
            .fighter_id = fd(1, .{ .Varint = .Simple }),
            .alive = fd(2, .{ .Varint = .Simple }),
            .complement = fd(null, .{ .OneOf = complement_union }),
        };

        pub const PlayerListEntry = struct {
            level: i32 = 0,
            additional: ArrayList(FightResultAdditionalData),

            pub const _desc_table = .{
                .level = fd(1, .{ .Varint = .Simple }),
                .additional = fd(2, .{ .List = .{ .SubMessage = {} } }),
            };

            pub const FightResultAdditionalData = struct {
                additional_data: ?additional_data_union,

                pub const _additional_data_case = enum {
                    experience_data,
                    pvp_data,
                };
                pub const additional_data_union = union(_additional_data_case) {
                    experience_data: ExperienceData,
                    pvp_data: PvpData,
                    pub const _union_desc = .{
                        .experience_data = fd(1, .{ .SubMessage = {} }),
                        .pvp_data = fd(2, .{ .SubMessage = {} }),
                    };
                };

                pub const _desc_table = .{
                    .additional_data = fd(null, .{ .OneOf = additional_data_union }),
                };

                pub const ExperienceData = struct {
                    experience: i64 = 0,
                    show_experience: bool = false,
                    experience_level_floor: i64 = 0,
                    show_experience_level_floor: bool = false,
                    experience_next_level_floor: i64 = 0,
                    show_experience_next_level_floor: bool = false,
                    experience_fight_delta: i64 = 0,
                    show_experience_fight_delta: bool = false,
                    experience_for_guild: i64 = 0,
                    show_experience_for_guild: bool = false,
                    experience_for_mount: i64 = 0,
                    show_experience_for_mount: bool = false,
                    re_roll_experience_multiplier: i32 = 0,

                    pub const _desc_table = .{
                        .experience = fd(1, .{ .Varint = .Simple }),
                        .show_experience = fd(2, .{ .Varint = .Simple }),
                        .experience_level_floor = fd(3, .{ .Varint = .Simple }),
                        .show_experience_level_floor = fd(4, .{ .Varint = .Simple }),
                        .experience_next_level_floor = fd(5, .{ .Varint = .Simple }),
                        .show_experience_next_level_floor = fd(6, .{ .Varint = .Simple }),
                        .experience_fight_delta = fd(7, .{ .Varint = .Simple }),
                        .show_experience_fight_delta = fd(8, .{ .Varint = .Simple }),
                        .experience_for_guild = fd(9, .{ .Varint = .Simple }),
                        .show_experience_for_guild = fd(10, .{ .Varint = .Simple }),
                        .experience_for_mount = fd(11, .{ .Varint = .Simple }),
                        .show_experience_for_mount = fd(12, .{ .Varint = .Simple }),
                        .re_roll_experience_multiplier = fd(13, .{ .Varint = .Simple }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub const PvpData = struct {
                    grade: i32 = 0,
                    min_honor_for_grade: i32 = 0,
                    max_honor_for_grade: i32 = 0,
                    honor: i32 = 0,
                    honor_delta: i32 = 0,

                    pub const _desc_table = .{
                        .grade = fd(1, .{ .Varint = .Simple }),
                        .min_honor_for_grade = fd(2, .{ .Varint = .Simple }),
                        .max_honor_for_grade = fd(3, .{ .Varint = .Simple }),
                        .honor = fd(4, .{ .Varint = .Simple }),
                        .honor_delta = fd(5, .{ .Varint = .Simple }),
                    };

                    pub usingnamespace protobuf.MessageMixins(@This());
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const MutantListEntry = struct {
            level: i32 = 0,

            pub const _desc_table = .{
                .level = fd(1, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const TaxCollectorListEntry = struct {
            alliance_information: ?AllianceInformation = null,

            pub const _desc_table = .{
                .alliance_information = fd(1, .{ .SubMessage = {} }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NamedPartyTeamWithOutcome = struct {
    team: ?NamedPartyTeam = null,
    outcome: FightOutcome = @enumFromInt(0),

    pub const _desc_table = .{
        .team = fd(1, .{ .SubMessage = {} }),
        .outcome = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightCharacteristics = struct {
    characteristics: ArrayList(CharacterCharacteristic),
    summoner: i64 = 0,
    summoned: bool = false,
    invisibility_state: FightInvisibilityState = @enumFromInt(0),

    pub const _desc_table = .{
        .characteristics = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .summoner = fd(2, .{ .Varint = .Simple }),
        .summoned = fd(3, .{ .Varint = .Simple }),
        .invisibility_state = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GuildInformation = struct {
    id: i32 = 0,
    name: ManagedString = .Empty,
    level: i32 = 0,
    social_information: ?GuildSocialInformation = null,

    pub const _desc_table = .{
        .id = fd(1, .{ .Varint = .Simple }),
        .name = fd(2, .String),
        .level = fd(3, .{ .Varint = .Simple }),
        .social_information = fd(4, .{ .SubMessage = {} }),
    };

    pub const GuildSocialInformation = struct {
        emblem: ?SocialEmblem = null,
        detailed_information: ?GuildDetailedInformation = null,

        pub const _desc_table = .{
            .emblem = fd(1, .{ .SubMessage = {} }),
            .detailed_information = fd(2, .{ .SubMessage = {} }),
        };

        pub const GuildDetailedInformation = struct {
            leader_id: i64 = 0,
            members_count: i32 = 0,
            last_activity_day: i32 = 0,
            recruitment: ?GuildRecruitmentInformation = null,
            pending_applications_count: i32 = 0,
            leader_name: ?ManagedString = null,

            pub const _desc_table = .{
                .leader_id = fd(1, .{ .Varint = .Simple }),
                .members_count = fd(2, .{ .Varint = .Simple }),
                .last_activity_day = fd(3, .{ .Varint = .Simple }),
                .recruitment = fd(4, .{ .SubMessage = {} }),
                .pending_applications_count = fd(5, .{ .Varint = .Simple }),
                .leader_name = fd(6, .String),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GuildRecruitmentInformation = struct {
    social_id: i32 = 0,
    recruitment_type: SocialRecruitmentType = @enumFromInt(0),
    title: ManagedString = .Empty,
    text: ManagedString = .Empty,
    selected_languages: ArrayList(i32),
    selected_criterion: ArrayList(i32),
    min_level: i32 = 0,
    min_level_facultative: bool = false,
    invalidated_by_moderation: bool = false,
    last_edit_player_name: ManagedString = .Empty,
    last_edit_date: i64 = 0,
    auto_locked: bool = false,
    min_success: i32 = 0,
    min_success_facultative: bool = false,

    pub const _desc_table = .{
        .social_id = fd(1, .{ .Varint = .Simple }),
        .recruitment_type = fd(2, .{ .Varint = .Simple }),
        .title = fd(3, .String),
        .text = fd(4, .String),
        .selected_languages = fd(5, .{ .PackedList = .{ .Varint = .Simple } }),
        .selected_criterion = fd(6, .{ .PackedList = .{ .Varint = .Simple } }),
        .min_level = fd(7, .{ .Varint = .Simple }),
        .min_level_facultative = fd(8, .{ .Varint = .Simple }),
        .invalidated_by_moderation = fd(9, .{ .Varint = .Simple }),
        .last_edit_player_name = fd(10, .String),
        .last_edit_date = fd(11, .{ .Varint = .Simple }),
        .auto_locked = fd(12, .{ .Varint = .Simple }),
        .min_success = fd(13, .{ .Varint = .Simple }),
        .min_success_facultative = fd(14, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GuildLogbookEntry = struct {
    guild_id: i32 = 0,
    date: i64 = 0,
    activity: ?activity_union,

    pub const _activity_case = enum {
        chest_activity,
        paddock_activity,
        player_flow_activity,
        level_up_activity,
        Unlock_new_tab_activity,
        rank_activity,
        player_rank_update_activity,
    };
    pub const activity_union = union(_activity_case) {
        chest_activity: ChestActivity,
        paddock_activity: PaddockActivity,
        player_flow_activity: PlayerFlowActivity,
        level_up_activity: LevelUpActivity,
        Unlock_new_tab_activity: UnlockNewTabActivity,
        rank_activity: RankActivity,
        player_rank_update_activity: PlayerRankUpdateActivity,
        pub const _union_desc = .{
            .chest_activity = fd(3, .{ .SubMessage = {} }),
            .paddock_activity = fd(4, .{ .SubMessage = {} }),
            .player_flow_activity = fd(5, .{ .SubMessage = {} }),
            .level_up_activity = fd(6, .{ .SubMessage = {} }),
            .Unlock_new_tab_activity = fd(7, .{ .SubMessage = {} }),
            .rank_activity = fd(8, .{ .SubMessage = {} }),
            .player_rank_update_activity = fd(9, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .guild_id = fd(1, .{ .Varint = .Simple }),
        .date = fd(2, .{ .Varint = .Simple }),
        .activity = fd(null, .{ .OneOf = activity_union }),
    };

    pub const ChestActivity = struct {
        player_id: i64 = 0,
        player_name: ManagedString = .Empty,
        event_type: ChestEventType = @enumFromInt(0),
        quantity: i32 = 0,
        object: ?ObjectItem = null,
        source_tab_id: i32 = 0,
        destination_tab_id: i32 = 0,

        pub const _desc_table = .{
            .player_id = fd(1, .{ .Varint = .Simple }),
            .player_name = fd(2, .String),
            .event_type = fd(3, .{ .Varint = .Simple }),
            .quantity = fd(4, .{ .Varint = .Simple }),
            .object = fd(5, .{ .SubMessage = {} }),
            .source_tab_id = fd(6, .{ .Varint = .Simple }),
            .destination_tab_id = fd(7, .{ .Varint = .Simple }),
        };

        pub const ChestEventType = enum(i32) {
            DEPOSIT = 0,
            WITHDRAW = 1,
            TRANSFER = 2,
            _,
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const PaddockActivity = struct {
        player_id: i64 = 0,
        player_name: ManagedString = .Empty,
        paddock_coordinates: ?MapExtendedCoordinates = null,
        farm_id: i64 = 0,
        paddock_commercial_event_type: PaddockCommercialEventType = @enumFromInt(0),

        pub const _desc_table = .{
            .player_id = fd(1, .{ .Varint = .Simple }),
            .player_name = fd(2, .String),
            .paddock_coordinates = fd(3, .{ .SubMessage = {} }),
            .farm_id = fd(4, .{ .Varint = .Simple }),
            .paddock_commercial_event_type = fd(5, .{ .Varint = .Simple }),
        };

        pub const PaddockCommercialEventType = enum(i32) {
            BUY = 0,
            PUT_ON_SELL = 1,
            SOLD = 2,
            _,
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const PlayerFlowActivity = struct {
        player_id: i64 = 0,
        player_name: ManagedString = .Empty,
        player_flow_event_type: PlayerFlowEventType = @enumFromInt(0),

        pub const _desc_table = .{
            .player_id = fd(1, .{ .Varint = .Simple }),
            .player_name = fd(2, .String),
            .player_flow_event_type = fd(3, .{ .Varint = .Simple }),
        };

        pub const PlayerFlowEventType = enum(i32) {
            JOIN = 0,
            LEAVE = 1,
            APPLY_REFUSED = 2,
            _,
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const LevelUpActivity = struct {
        new_guild_level: i32 = 0,

        pub const _desc_table = .{
            .new_guild_level = fd(1, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const UnlockNewTabActivity = struct {
        pub const _desc_table = .{};

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const RankActivity = struct {
        rank_activity_type: RankActivityType = @enumFromInt(0),
        rank_information: ?RankInformation = null,

        pub const _desc_table = .{
            .rank_activity_type = fd(1, .{ .Varint = .Simple }),
            .rank_information = fd(2, .{ .SubMessage = {} }),
        };

        pub const RankActivityType = enum(i32) {
            CREATION = 0,
            UPDATE = 1,
            DELETE = 2,
            _,
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const PlayerRankUpdateActivity = struct {
        rank_information: ?RankInformation = null,
        source_player_id: i64 = 0,
        target_player_id: i64 = 0,
        source_player_name: ManagedString = .Empty,
        target_player_name: ManagedString = .Empty,

        pub const _desc_table = .{
            .rank_information = fd(1, .{ .SubMessage = {} }),
            .source_player_id = fd(2, .{ .Varint = .Simple }),
            .target_player_id = fd(3, .{ .Varint = .Simple }),
            .source_player_name = fd(4, .String),
            .target_player_name = fd(5, .String),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const HouseInstance = struct {
    instance_id: i32 = 0,
    second_hand: bool = false,
    is_locked: bool = false,
    account_tag: ?AccountTag = null,
    has_owner: bool = false,
    is_sale_locked: bool = false,
    is_admin_locked: bool = false,
    rooms_count: i32 = 0,
    chests_count: i32 = 0,
    skills_id: ArrayList(i32),
    price: ?i64 = null,
    guild_information: ?GuildInformation = null,

    pub const _desc_table = .{
        .instance_id = fd(1, .{ .Varint = .Simple }),
        .second_hand = fd(2, .{ .Varint = .Simple }),
        .is_locked = fd(3, .{ .Varint = .Simple }),
        .account_tag = fd(4, .{ .SubMessage = {} }),
        .has_owner = fd(5, .{ .Varint = .Simple }),
        .is_sale_locked = fd(7, .{ .Varint = .Simple }),
        .is_admin_locked = fd(8, .{ .Varint = .Simple }),
        .rooms_count = fd(10, .{ .Varint = .Simple }),
        .chests_count = fd(11, .{ .Varint = .Simple }),
        .skills_id = fd(12, .{ .PackedList = .{ .Varint = .Simple } }),
        .price = fd(6, .{ .Varint = .Simple }),
        .guild_information = fd(9, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const House = struct {
    house_id: i32 = 0,
    model_id: i32 = 0,
    information: ?information_union,

    pub const _information_case = enum {
        house_account,
        house_on_map,
        house_inside,
        house_guild,
    };
    pub const information_union = union(_information_case) {
        house_account: HouseAccount,
        house_on_map: HouseOnMap,
        house_inside: HouseInside,
        house_guild: HouseGuild,
        pub const _union_desc = .{
            .house_account = fd(3, .{ .SubMessage = {} }),
            .house_on_map = fd(4, .{ .SubMessage = {} }),
            .house_inside = fd(5, .{ .SubMessage = {} }),
            .house_guild = fd(6, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .house_id = fd(1, .{ .Varint = .Simple }),
        .model_id = fd(2, .{ .Varint = .Simple }),
        .information = fd(null, .{ .OneOf = information_union }),
    };

    pub const HouseAccount = struct {
        house_information: ?HouseInstance = null,
        coordinates: ?MapExtendedCoordinates = null,

        pub const _desc_table = .{
            .house_information = fd(1, .{ .SubMessage = {} }),
            .coordinates = fd(2, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const HouseOnMap = struct {
        doors_on_map: ArrayList(i32),
        houses_information: ArrayList(HouseInstance),

        pub const _desc_table = .{
            .doors_on_map = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
            .houses_information = fd(2, .{ .List = .{ .SubMessage = {} } }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const HouseInside = struct {
        house_information: ?HouseInstance = null,
        coordinates: ?MapCoordinates = null,

        pub const _desc_table = .{
            .house_information = fd(1, .{ .SubMessage = {} }),
            .coordinates = fd(2, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const HouseGuild = struct {
        house_information: ?HouseInstance = null,
        coordinates: ?MapExtendedCoordinates = null,
        skills_id: ArrayList(i32),
        guild_share_params: i64 = 0,

        pub const _desc_table = .{
            .house_information = fd(1, .{ .SubMessage = {} }),
            .coordinates = fd(2, .{ .SubMessage = {} }),
            .skills_id = fd(3, .{ .PackedList = .{ .Varint = .Simple } }),
            .guild_share_params = fd(4, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Shortcut = struct {
    slot_id: i32 = 0,
    shortcut: ?shortcut_union,

    pub const _shortcut_case = enum {
        shortcut_object_item,
        shortcut_preset,
        shortcut_spell,
        shortcut_smiley,
        shortcut_emote,
        shortcut_cosmetic_object,
        shortcut_outfit,
    };
    pub const shortcut_union = union(_shortcut_case) {
        shortcut_object_item: ShortcutObjectItem,
        shortcut_preset: ShortcutPreset,
        shortcut_spell: ShortcutSpell,
        shortcut_smiley: ShortcutSmiley,
        shortcut_emote: ShortcutEmote,
        shortcut_cosmetic_object: ShortcutCosmeticObject,
        shortcut_outfit: ShortcutOutfit,
        pub const _union_desc = .{
            .shortcut_object_item = fd(2, .{ .SubMessage = {} }),
            .shortcut_preset = fd(3, .{ .SubMessage = {} }),
            .shortcut_spell = fd(4, .{ .SubMessage = {} }),
            .shortcut_smiley = fd(5, .{ .SubMessage = {} }),
            .shortcut_emote = fd(6, .{ .SubMessage = {} }),
            .shortcut_cosmetic_object = fd(7, .{ .SubMessage = {} }),
            .shortcut_outfit = fd(8, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .slot_id = fd(1, .{ .Varint = .Simple }),
        .shortcut = fd(null, .{ .OneOf = shortcut_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ShortcutObjectItem = struct {
    item_uid: i32 = 0,
    item_gid: i32 = 0,

    pub const _desc_table = .{
        .item_uid = fd(1, .{ .Varint = .Simple }),
        .item_gid = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ShortcutSpell = struct {
    spell_id: i32 = 0,

    pub const _desc_table = .{
        .spell_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ShortcutSmiley = struct {
    smiley_id: i32 = 0,

    pub const _desc_table = .{
        .smiley_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ShortcutEmote = struct {
    emote_id: i32 = 0,

    pub const _desc_table = .{
        .emote_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ShortcutCosmeticObject = struct {
    object_gid: i32 = 0,
    enable: bool = false,
    skin_id: ?i32 = null,

    pub const _desc_table = .{
        .object_gid = fd(1, .{ .Varint = .Simple }),
        .enable = fd(3, .{ .Varint = .Simple }),
        .skin_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ShortcutOutfit = struct {
    outfit_uuid: ManagedString = .Empty,

    pub const _desc_table = .{
        .outfit_uuid = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ShortcutPreset = struct {
    preset_uuid: ManagedString = .Empty,
    type: PresetType = @enumFromInt(0),

    pub const _desc_table = .{
        .preset_uuid = fd(1, .String),
        .type = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapCoordinates = struct {
    world_x: i32 = 0,
    world_y: i32 = 0,

    pub const _desc_table = .{
        .world_x = fd(1, .{ .Varint = .Simple }),
        .world_y = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapExtendedCoordinates = struct {
    world_x: i32 = 0,
    world_y: i32 = 0,
    map_id: i64 = 0,
    sub_area_id: i32 = 0,

    pub const _desc_table = .{
        .world_x = fd(1, .{ .Varint = .Simple }),
        .world_y = fd(2, .{ .Varint = .Simple }),
        .map_id = fd(3, .{ .Varint = .Simple }),
        .sub_area_id = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MonsterGroupStaticInformation = struct {
    main_creature: ?MonsterInGroupInformation = null,
    underlings: ArrayList(MonsterInGroupInformation),
    alternatives: ArrayList(MonstersInGroupAlternativeInformation),

    pub const _desc_table = .{
        .main_creature = fd(1, .{ .SubMessage = {} }),
        .underlings = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .alternatives = fd(3, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MonsterInGroupInformation = struct {
    gid: i32 = 0,
    grade: i32 = 0,
    level: i32 = 0,
    look: ?EntityLook = null,

    pub const _desc_table = .{
        .gid = fd(1, .{ .Varint = .Simple }),
        .grade = fd(2, .{ .Varint = .Simple }),
        .level = fd(3, .{ .Varint = .Simple }),
        .look = fd(4, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MonstersInGroupAlternativeInformation = struct {
    player_count: i32 = 0,
    monsters: ArrayList(MonsterInGroupInformation),

    pub const _desc_table = .{
        .player_count = fd(1, .{ .Varint = .Simple }),
        .monsters = fd(2, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ItemMinimalInformation = struct {
    object_gid: i32 = 0,
    effects: ArrayList(ObjectEffect),
    complement: ?complement_union,

    pub const _complement_case = enum {
        quantity,
        item_to_sell_in_npc_shop,
    };
    pub const complement_union = union(_complement_case) {
        quantity: i32,
        item_to_sell_in_npc_shop: ItemToSellInNpcShop,
        pub const _union_desc = .{
            .quantity = fd(3, .{ .Varint = .Simple }),
            .item_to_sell_in_npc_shop = fd(4, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .object_gid = fd(1, .{ .Varint = .Simple }),
        .effects = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .complement = fd(null, .{ .OneOf = complement_union }),
    };

    pub const ItemToSellInNpcShop = struct {
        price: i64 = 0,
        buy_criterion: ManagedString = .Empty,

        pub const _desc_table = .{
            .price = fd(1, .{ .Varint = .Simple }),
            .buy_criterion = fd(2, .String),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ObjectGidWithQuantity = struct {
    object_gid: i32 = 0,
    quantity: i32 = 0,
    price_date_effect: ?ObjectPriceDateEffect = null,

    pub const _desc_table = .{
        .object_gid = fd(1, .{ .Varint = .Simple }),
        .quantity = fd(2, .{ .Varint = .Simple }),
        .price_date_effect = fd(3, .{ .SubMessage = {} }),
    };

    pub const ObjectPriceDateEffect = struct {
        price: i64 = 0,
        effects: ArrayList(ObjectEffect),
        date: i64 = 0,

        pub const _desc_table = .{
            .price = fd(1, .{ .Varint = .Simple }),
            .effects = fd(2, .{ .List = .{ .SubMessage = {} } }),
            .date = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ObjectUidWithQuantity = struct {
    object_uid: i32 = 0,
    quantity: i32 = 0,

    pub const _desc_table = .{
        .object_uid = fd(1, .{ .Varint = .Simple }),
        .quantity = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ObjectItemInventory = struct {
    position: i32 = 0,
    item: ?ObjectItem = null,
    favorite: bool = false,
    tag_storage_uuids: ArrayList(ManagedString),

    pub const _desc_table = .{
        .position = fd(1, .{ .Varint = .Simple }),
        .item = fd(2, .{ .SubMessage = {} }),
        .favorite = fd(3, .{ .Varint = .Simple }),
        .tag_storage_uuids = fd(4, .{ .List = .String }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ObjectItem = struct {
    uid: i32 = 0,
    quantity: i32 = 0,
    gid: i64 = 0,
    effects: ArrayList(ObjectEffect),

    pub const _desc_table = .{
        .uid = fd(1, .{ .Varint = .Simple }),
        .quantity = fd(2, .{ .Varint = .Simple }),
        .gid = fd(3, .{ .Varint = .Simple }),
        .effects = fd(4, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ObjectEffect = struct {
    action: i32 = 0,
    effect: ?effect_union,

    pub const _effect_case = enum {
        value_string,
        value_int,
        min_max,
        dice,
        date,
        duration_minute,
        creature_family,
        monster_count,
        mount,
    };
    pub const effect_union = union(_effect_case) {
        value_string: ManagedString,
        value_int: i32,
        min_max: ObjectEffectMinMaxValue,
        dice: ObjectEffectDiceValue,
        date: DofusDate,
        duration_minute: i64,
        creature_family: i32,
        monster_count: MonsterCount,
        mount: ObjectEffectMountValue,
        pub const _union_desc = .{
            .value_string = fd(2, .String),
            .value_int = fd(3, .{ .Varint = .Simple }),
            .min_max = fd(4, .{ .SubMessage = {} }),
            .dice = fd(5, .{ .SubMessage = {} }),
            .date = fd(6, .{ .SubMessage = {} }),
            .duration_minute = fd(7, .{ .Varint = .Simple }),
            .creature_family = fd(8, .{ .Varint = .Simple }),
            .monster_count = fd(9, .{ .SubMessage = {} }),
            .mount = fd(10, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .action = fd(1, .{ .Varint = .Simple }),
        .effect = fd(null, .{ .OneOf = effect_union }),
    };

    pub const DofusDate = struct {
        year: i32 = 0,
        month: i32 = 0,
        day: i32 = 0,
        hour: i32 = 0,
        minute: i32 = 0,

        pub const _desc_table = .{
            .year = fd(1, .{ .Varint = .Simple }),
            .month = fd(2, .{ .Varint = .Simple }),
            .day = fd(3, .{ .Varint = .Simple }),
            .hour = fd(4, .{ .Varint = .Simple }),
            .minute = fd(5, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ObjectEffectMinMaxValue = struct {
        min: i32 = 0,
        max: i32 = 0,

        pub const _desc_table = .{
            .min = fd(1, .{ .Varint = .Simple }),
            .max = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ObjectEffectDiceValue = struct {
        num: i64 = 0,
        side: i32 = 0,
        @"const": i32 = 0,

        pub const _desc_table = .{
            .num = fd(1, .{ .Varint = .Simple }),
            .side = fd(2, .{ .Varint = .Simple }),
            .@"const" = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const MonsterCount = struct {
        creature_family: i32 = 0,
        count: i32 = 0,

        pub const _desc_table = .{
            .creature_family = fd(1, .{ .Varint = .Simple }),
            .count = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ObjectEffectMountValue = struct {
        certificate_id: i64 = 0,
        date_expiration: ManagedString = .Empty,
        model_id: i32 = 0,
        mount_name: ManagedString = .Empty,
        owner_name: ManagedString = .Empty,
        mount_level: i32 = 0,
        mount_gender: Gender = @enumFromInt(0),
        rideable: bool = false,
        impregnated: bool = false,
        impregnate_ready: bool = false,
        reproduction_count: i32 = 0,
        reproduction_max: i32 = 0,
        effect: ArrayList(ObjectEffect),
        capacity: ArrayList(i32),

        pub const _desc_table = .{
            .certificate_id = fd(1, .{ .Varint = .Simple }),
            .date_expiration = fd(2, .String),
            .model_id = fd(3, .{ .Varint = .Simple }),
            .mount_name = fd(4, .String),
            .owner_name = fd(5, .String),
            .mount_level = fd(6, .{ .Varint = .Simple }),
            .mount_gender = fd(7, .{ .Varint = .Simple }),
            .rideable = fd(8, .{ .Varint = .Simple }),
            .impregnated = fd(9, .{ .Varint = .Simple }),
            .impregnate_ready = fd(10, .{ .Varint = .Simple }),
            .reproduction_count = fd(11, .{ .Varint = .Simple }),
            .reproduction_max = fd(12, .{ .Varint = .Simple }),
            .effect = fd(13, .{ .List = .{ .SubMessage = {} } }),
            .capacity = fd(14, .{ .PackedList = .{ .Varint = .Simple } }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ObjectInRolePlay = struct {
    cell_id: i32 = 0,
    object_gid: i32 = 0,
    complement: ?complement_union,

    pub const _complement_case = enum {
        with_look,
        paddock_item,
    };
    pub const complement_union = union(_complement_case) {
        with_look: WithLook,
        paddock_item: PaddockItem,
        pub const _union_desc = .{
            .with_look = fd(3, .{ .SubMessage = {} }),
            .paddock_item = fd(4, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .cell_id = fd(1, .{ .Varint = .Simple }),
        .object_gid = fd(2, .{ .Varint = .Simple }),
        .complement = fd(null, .{ .OneOf = complement_union }),
    };

    pub const WithLook = struct {
        look: ?EntityLook = null,
        direction: ?Direction = null,

        pub const _desc_table = .{
            .look = fd(1, .{ .SubMessage = {} }),
            .direction = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const PaddockItem = struct {
        durability: i32 = 0,
        durability_max: i32 = 0,

        pub const _desc_table = .{
            .durability = fd(1, .{ .Varint = .Simple }),
            .durability_max = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GameActionItem = struct {
    id: i32 = 0,
    title: ManagedString = .Empty,
    text: ManagedString = .Empty,
    desc_url: ManagedString = .Empty,
    picture_url: ManagedString = .Empty,
    items: ArrayList(ItemMinimalInformation),

    pub const _desc_table = .{
        .id = fd(1, .{ .Varint = .Simple }),
        .title = fd(2, .String),
        .text = fd(3, .String),
        .desc_url = fd(4, .String),
        .picture_url = fd(5, .String),
        .items = fd(6, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PortalInformation = struct {
    portal_id: i32 = 0,
    area_id: i32 = 0,

    pub const _desc_table = .{
        .portal_id = fd(1, .{ .Varint = .Simple }),
        .area_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PrismInformation = struct {
    state: PrismState = @enumFromInt(0),
    placement_date: i64 = 0,
    nuggets_count: i64 = 0,
    durability: i32 = 0,
    next_evolution_date: i64 = 0,
    alliance_information: ?AllianceInformation = null,
    module: ?PrismModule = null,
    cristal: ?PrismCristal = null,
    cristal_number_left: ?i32 = null,

    pub const _desc_table = .{
        .state = fd(1, .{ .Varint = .Simple }),
        .placement_date = fd(2, .{ .Varint = .Simple }),
        .nuggets_count = fd(3, .{ .Varint = .Simple }),
        .durability = fd(4, .{ .Varint = .Simple }),
        .next_evolution_date = fd(5, .{ .Varint = .Simple }),
        .alliance_information = fd(6, .{ .SubMessage = {} }),
        .module = fd(7, .{ .SubMessage = {} }),
        .cristal = fd(8, .{ .SubMessage = {} }),
        .cristal_number_left = fd(9, .{ .Varint = .Simple }),
    };

    pub const PrismState = enum(i32) {
        NORMAL = 0,
        WEAKENED = 1,
        VULNERABLE = 2,
        PROTECTED = 3,
        INHIBITED = 4,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PrismLocalizedInformation = struct {
    sub_area_id: i32 = 0,
    alliance_uid: ManagedString = .Empty,
    map_coordinates: ?MapCoordinates = null,
    map_id: i64 = 0,
    prism: ?PrismInformation = null,

    pub const _desc_table = .{
        .sub_area_id = fd(1, .{ .Varint = .Simple }),
        .alliance_uid = fd(2, .String),
        .map_coordinates = fd(3, .{ .SubMessage = {} }),
        .map_id = fd(4, .{ .Varint = .Simple }),
        .prism = fd(5, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PrismModule = struct {
    module_object: ?ObjectItemInventory = null,
    type: PrismModuleType = @enumFromInt(0),

    pub const _desc_table = .{
        .module_object = fd(1, .{ .SubMessage = {} }),
        .type = fd(2, .{ .Varint = .Simple }),
    };

    pub const PrismModuleType = enum(i32) {
        NO_MODULE = 0,
        TELEPORTER = 1,
        RECYCLER = 2,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PrismCristal = struct {
    cristal_object: ?ObjectItemInventory = null,
    type: PrismCristalType = @enumFromInt(0),

    pub const _desc_table = .{
        .cristal_object = fd(1, .{ .SubMessage = {} }),
        .type = fd(2, .{ .Varint = .Simple }),
    };

    pub const PrismCristalType = enum(i32) {
        NO_CRISTAL = 0,
        PROTECTIVE = 1,
        INHIBITOR = 2,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AllianceRecruitmentInformation = struct {
    social_uid: ManagedString = .Empty,
    recruitment_type: SocialRecruitmentType = @enumFromInt(0),
    title: ManagedString = .Empty,
    text: ManagedString = .Empty,
    selected_languages: ArrayList(i32),
    selected_criterion: ArrayList(i32),
    min_level: i32 = 0,
    min_level_facultative: bool = false,
    invalidated_by_moderation: bool = false,
    last_edit_player_name: ManagedString = .Empty,
    last_edit_date: i64 = 0,
    auto_locked: bool = false,

    pub const _desc_table = .{
        .social_uid = fd(1, .String),
        .recruitment_type = fd(2, .{ .Varint = .Simple }),
        .title = fd(3, .String),
        .text = fd(4, .String),
        .selected_languages = fd(5, .{ .PackedList = .{ .Varint = .Simple } }),
        .selected_criterion = fd(6, .{ .PackedList = .{ .Varint = .Simple } }),
        .min_level = fd(7, .{ .Varint = .Simple }),
        .min_level_facultative = fd(8, .{ .Varint = .Simple }),
        .invalidated_by_moderation = fd(9, .{ .Varint = .Simple }),
        .last_edit_player_name = fd(10, .String),
        .last_edit_date = fd(11, .{ .Varint = .Simple }),
        .auto_locked = fd(12, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SocialEmblem = struct {
    symbol_shape_id: i32 = 0,
    symbol_color: i32 = 0,
    background_shape_id: i32 = 0,
    background_color: i32 = 0,

    pub const _desc_table = .{
        .symbol_shape_id = fd(1, .{ .Varint = .Simple }),
        .symbol_color = fd(2, .{ .Varint = .Simple }),
        .background_shape_id = fd(3, .{ .Varint = .Simple }),
        .background_color = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SocialNoticeInformation = struct {
    content: ManagedString = .Empty,
    timestamp: i64 = 0,
    member_id: i64 = 0,
    member_name: ManagedString = .Empty,

    pub const _desc_table = .{
        .content = fd(1, .String),
        .timestamp = fd(2, .{ .Varint = .Simple }),
        .member_id = fd(3, .{ .Varint = .Simple }),
        .member_name = fd(4, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RankInformation = struct {
    id: i32 = 0,
    name: ManagedString = .Empty,
    order_and_gfx: ?OrderAndGfx = null,
    private_information: ?PrivateInformation = null,

    pub const _desc_table = .{
        .id = fd(1, .{ .Varint = .Simple }),
        .name = fd(2, .String),
        .order_and_gfx = fd(3, .{ .SubMessage = {} }),
        .private_information = fd(4, .{ .SubMessage = {} }),
    };

    pub const OrderAndGfx = struct {
        order: i32 = 0,
        gfx_id: i32 = 0,

        pub const _desc_table = .{
            .order = fd(1, .{ .Varint = .Simple }),
            .gfx_id = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const PrivateInformation = struct {
        modifiable: bool = false,
        rights: ArrayList(i32),

        pub const _desc_table = .{
            .modifiable = fd(1, .{ .Varint = .Simple }),
            .rights = fd(2, .{ .PackedList = .{ .Varint = .Simple } }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TaxCollectorInformation = struct {
    uid: ManagedString = .Empty,
    first_name_id: i32 = 0,
    last_name_id: i32 = 0,
    alliance: ?AllianceInformation = null,
    caller_id: i64 = 0,
    caller_name: ManagedString = .Empty,
    hired_date: i64 = 0,
    coordinates: ?MapCoordinates = null,
    sub_area_id: i32 = 0,
    map_id: i64 = 0,
    state: TaxCollectorState = @enumFromInt(0),
    entity_look: ?EntityLook = null,
    complementary_information: ArrayList(TaxCollectorComplementaryInformation),
    character_characteristics: ArrayList(CharacterCharacteristic),
    equipments: ArrayList(ObjectItemInventory),
    spells: ArrayList(TaxCollectorOrderedSpell),

    pub const _desc_table = .{
        .uid = fd(1, .String),
        .first_name_id = fd(2, .{ .Varint = .Simple }),
        .last_name_id = fd(3, .{ .Varint = .Simple }),
        .alliance = fd(4, .{ .SubMessage = {} }),
        .caller_id = fd(5, .{ .Varint = .Simple }),
        .caller_name = fd(6, .String),
        .hired_date = fd(7, .{ .Varint = .Simple }),
        .coordinates = fd(8, .{ .SubMessage = {} }),
        .sub_area_id = fd(9, .{ .Varint = .Simple }),
        .map_id = fd(10, .{ .Varint = .Simple }),
        .state = fd(11, .{ .Varint = .Simple }),
        .entity_look = fd(12, .{ .SubMessage = {} }),
        .complementary_information = fd(13, .{ .List = .{ .SubMessage = {} } }),
        .character_characteristics = fd(14, .{ .List = .{ .SubMessage = {} } }),
        .equipments = fd(15, .{ .List = .{ .SubMessage = {} } }),
        .spells = fd(16, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TaxCollectorStaticInformation = struct {
    uid: ManagedString = .Empty,
    first_name_id: i32 = 0,
    last_name_id: i32 = 0,
    alliance: ?AllianceInformation = null,
    caller_id: i64 = 0,

    pub const _desc_table = .{
        .uid = fd(1, .String),
        .first_name_id = fd(2, .{ .Varint = .Simple }),
        .last_name_id = fd(3, .{ .Varint = .Simple }),
        .alliance = fd(4, .{ .SubMessage = {} }),
        .caller_id = fd(5, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TaxCollectorComplementaryInformation = struct {
    complementary_information: ?complementary_information_union,

    pub const _complementary_information_case = enum {
        loot_information,
        waiting_for_help_information,
    };
    pub const complementary_information_union = union(_complementary_information_case) {
        loot_information: TaxCollectorLootInformation,
        waiting_for_help_information: TaxCollectorWaitingForHelpInformation,
        pub const _union_desc = .{
            .loot_information = fd(1, .{ .SubMessage = {} }),
            .waiting_for_help_information = fd(2, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .complementary_information = fd(null, .{ .OneOf = complementary_information_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TaxCollectorLootInformation = struct {
    pods: i32 = 0,
    items_kamas_value: i64 = 0,

    pub const _desc_table = .{
        .pods = fd(1, .{ .Varint = .Simple }),
        .items_kamas_value = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TaxCollectorWaitingForHelpInformation = struct {
    time_left_before_fight: i64 = 0,
    placement_time_left: i64 = 0,
    defender_slots_left: i32 = 0,

    pub const _desc_table = .{
        .time_left_before_fight = fd(1, .{ .Varint = .Simple }),
        .placement_time_left = fd(2, .{ .Varint = .Simple }),
        .defender_slots_left = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TaxCollectorOrderedSpell = struct {
    spell_id: i32 = 0,
    slot_id: i32 = 0,

    pub const _desc_table = .{
        .spell_id = fd(1, .{ .Varint = .Simple }),
        .slot_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TaxCollectorPreset = struct {
    preset_uid: ManagedString = .Empty,
    spells: ArrayList(TaxCollectorOrderedSpell),
    characteristics: ArrayList(CharacterCharacteristic),

    pub const _desc_table = .{
        .preset_uid = fd(1, .String),
        .spells = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .characteristics = fd(3, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MountData = struct {
    id: i64 = 0,
    model_id: i32 = 0,
    ancestors: ArrayList(i32),
    behaviors: ArrayList(i32),
    name: ManagedString = .Empty,
    gender: Gender = @enumFromInt(0),
    owner_id: i64 = 0,
    experience: i64 = 0,
    experience_for_level: i64 = 0,
    level: i32 = 0,
    is_rideable: bool = false,
    max_pods: i32 = 0,
    is_wild: bool = false,
    stamina: i32 = 0,
    stamina_max: i32 = 0,
    maturity: i32 = 0,
    maturity_for_adult: i32 = 0,
    energy: i32 = 0,
    energy_max: i32 = 0,
    serenity: i32 = 0,
    aggressiveness_max: i32 = 0,
    serenity_max: i32 = 0,
    love: i32 = 0,
    love_max: i32 = 0,
    fertilization_time: i32 = 0,
    is_fertilization_ready: bool = false,
    boost_limiter: i32 = 0,
    boost_max: i64 = 0,
    reproduction_count: i32 = 0,
    reproduction_count_max: i64 = 0,
    harness_gid: i32 = 0,
    use_harness_colors: bool = false,
    effects: ArrayList(ObjectEffect),
    experience_for_next_level: ?i64 = null,

    pub const _desc_table = .{
        .id = fd(1, .{ .Varint = .Simple }),
        .model_id = fd(2, .{ .Varint = .Simple }),
        .ancestors = fd(3, .{ .PackedList = .{ .Varint = .Simple } }),
        .behaviors = fd(4, .{ .PackedList = .{ .Varint = .Simple } }),
        .name = fd(5, .String),
        .gender = fd(6, .{ .Varint = .Simple }),
        .owner_id = fd(7, .{ .Varint = .Simple }),
        .experience = fd(8, .{ .Varint = .Simple }),
        .experience_for_level = fd(9, .{ .Varint = .Simple }),
        .level = fd(11, .{ .Varint = .Simple }),
        .is_rideable = fd(12, .{ .Varint = .Simple }),
        .max_pods = fd(13, .{ .Varint = .Simple }),
        .is_wild = fd(14, .{ .Varint = .Simple }),
        .stamina = fd(15, .{ .Varint = .Simple }),
        .stamina_max = fd(16, .{ .Varint = .Simple }),
        .maturity = fd(17, .{ .Varint = .Simple }),
        .maturity_for_adult = fd(18, .{ .Varint = .Simple }),
        .energy = fd(19, .{ .Varint = .Simple }),
        .energy_max = fd(20, .{ .Varint = .Simple }),
        .serenity = fd(21, .{ .Varint = .Simple }),
        .aggressiveness_max = fd(22, .{ .Varint = .Simple }),
        .serenity_max = fd(23, .{ .Varint = .Simple }),
        .love = fd(24, .{ .Varint = .Simple }),
        .love_max = fd(25, .{ .Varint = .Simple }),
        .fertilization_time = fd(26, .{ .Varint = .Simple }),
        .is_fertilization_ready = fd(27, .{ .Varint = .Simple }),
        .boost_limiter = fd(28, .{ .Varint = .Simple }),
        .boost_max = fd(29, .{ .Varint = .Simple }),
        .reproduction_count = fd(30, .{ .Varint = .Simple }),
        .reproduction_count_max = fd(31, .{ .Varint = .Simple }),
        .harness_gid = fd(32, .{ .Varint = .Simple }),
        .use_harness_colors = fd(33, .{ .Varint = .Simple }),
        .effects = fd(34, .{ .List = .{ .SubMessage = {} } }),
        .experience_for_next_level = fd(10, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PaddockInformation = struct {
    max_outdoor_mount: i32 = 0,
    max_items: i32 = 0,
    information: ?information_union,

    pub const _information_case = enum {
        content,
        instances,
    };
    pub const information_union = union(_information_case) {
        content: PaddockContent,
        instances: PaddockInstances,
        pub const _union_desc = .{
            .content = fd(3, .{ .SubMessage = {} }),
            .instances = fd(4, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .max_outdoor_mount = fd(1, .{ .Varint = .Simple }),
        .max_items = fd(2, .{ .Varint = .Simple }),
        .information = fd(null, .{ .OneOf = information_union }),
    };

    pub const PaddockContent = struct {
        paddock_id: i64 = 0,
        coordinates: ?MapExtendedCoordinates = null,
        abandoned: bool = false,
        mounts_information: ArrayList(MountForPaddock),

        pub const _desc_table = .{
            .paddock_id = fd(1, .{ .Varint = .Simple }),
            .coordinates = fd(2, .{ .SubMessage = {} }),
            .abandoned = fd(3, .{ .Varint = .Simple }),
            .mounts_information = fd(4, .{ .List = .{ .SubMessage = {} } }),
        };

        pub const MountForPaddock = struct {
            model_id: i32 = 0,
            name: ManagedString = .Empty,
            owner_name: ManagedString = .Empty,

            pub const _desc_table = .{
                .model_id = fd(1, .{ .Varint = .Simple }),
                .name = fd(2, .String),
                .owner_name = fd(3, .String),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const PaddockInstances = struct {
        paddocks_to_sell: ArrayList(PaddockToSell),

        pub const _desc_table = .{
            .paddocks_to_sell = fd(1, .{ .List = .{ .SubMessage = {} } }),
        };

        pub const PaddockToSell = struct {
            price: i64 = 0,
            locked: bool = false,
            guild_information: ?PaddockGuildInformation = null,

            pub const _desc_table = .{
                .price = fd(1, .{ .Varint = .Simple }),
                .locked = fd(2, .{ .Varint = .Simple }),
                .guild_information = fd(3, .{ .SubMessage = {} }),
            };

            pub const PaddockGuildInformation = struct {
                deserted: bool = false,
                guild_information: ?GuildInformation = null,

                pub const _desc_table = .{
                    .deserted = fd(1, .{ .Varint = .Simple }),
                    .guild_information = fd(2, .{ .SubMessage = {} }),
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SpellItem = struct {
    spell_id: i32 = 0,
    spell_level: i32 = 0,
    available: ?bool = null,

    pub const _desc_table = .{
        .spell_id = fd(1, .{ .Varint = .Simple }),
        .spell_level = fd(2, .{ .Varint = .Simple }),
        .available = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SpellModifier = struct {
    spell_id: i32 = 0,
    action_type: SpellModifierActionType = @enumFromInt(0),
    modifier_type: SpellModifierType = @enumFromInt(0),
    context: i32 = 0,
    equipment: i32 = 0,

    pub const _desc_table = .{
        .spell_id = fd(1, .{ .Varint = .Simple }),
        .action_type = fd(2, .{ .Varint = .Simple }),
        .modifier_type = fd(3, .{ .Varint = .Simple }),
        .context = fd(4, .{ .Varint = .Simple }),
        .equipment = fd(5, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BidActivitiesRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BidActivityResponse = struct {
    bid_activities: ArrayList(BidActivity),

    pub const _desc_table = .{
        .bid_activities = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BidActivity = struct {
    bidId: i32 = 0,
    type: Type = @enumFromInt(0),
    created_at: ManagedString = .Empty,
    object: ?ItemMinimalInformation = null,
    price: i64 = 0,

    pub const _desc_table = .{
        .bidId = fd(1, .{ .Varint = .Simple }),
        .type = fd(2, .{ .Varint = .Simple }),
        .created_at = fd(3, .String),
        .object = fd(4, .{ .SubMessage = {} }),
        .price = fd(5, .{ .Varint = .Simple }),
    };

    pub const Type = enum(i32) {
        SELL = 0,
        BUY = 1,
        EXPIRE = 2,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
