// Code generated by protoc-gen-zig
///! package com.ankama.dofus.server.game.protocol.game.action
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
/// import package com.ankama.dofus.server.game.protocol.common
const com_ankama_dofus_server_game_protocol_common = @import("../common.pb.zig");

pub const FightSpellCastCritical = enum(i32) {
    NORMAL = 0,
    CRITICAL_HIT = 1,
    CRITICAL_FAIL = 2,
    _,
};

pub const SequenceType = enum(i32) {
    SPELL = 0,
    WEAPON = 1,
    GLYPH_TRAP = 2,
    TRIGGERED = 3,
    MOVE = 4,
    CHARACTER_DEATH = 5,
    TURN_START = 6,
    TURN_END = 7,
    FIGHT_START = 8,
    _,
};

pub const GameActionItemConsumeRequest = struct {
    action_id: i32 = 0,
    player_id: i64 = 0,

    pub const _desc_table = .{
        .action_id = fd(1, .{ .Varint = .Simple }),
        .player_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GameActionItemConsumeAllRequest = struct {
    player_id: i64 = 0,

    pub const _desc_table = .{
        .player_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GameActionFightCastRequest = struct {
    spell_id: i32 = 0,
    cell: i32 = 0,

    pub const _desc_table = .{
        .spell_id = fd(1, .{ .Varint = .Simple }),
        .cell = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GameActionFightCastOnTargetRequest = struct {
    spell_id: i32 = 0,
    target_id: i64 = 0,

    pub const _desc_table = .{
        .spell_id = fd(1, .{ .Varint = .Simple }),
        .target_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GameActionAcknowledgementRequest = struct {
    valid: bool = false,
    action_id: i32 = 0,

    pub const _desc_table = .{
        .valid = fd(1, .{ .Varint = .Simple }),
        .action_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GameActionItemListEvent = struct {
    actions: ArrayList(com_ankama_dofus_server_game_protocol_common.GameActionItem),

    pub const _desc_table = .{
        .actions = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GameActionItemConsumedEvent = struct {
    success: bool = false,
    action_id: i32 = 0,
    automatic_action: bool = false,

    pub const _desc_table = .{
        .success = fd(1, .{ .Varint = .Simple }),
        .action_id = fd(2, .{ .Varint = .Simple }),
        .automatic_action = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GameActionSpamEvent = struct {
    cells: ArrayList(i32),

    pub const _desc_table = .{
        .cells = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GameActionFightEvent = struct {
    action_id: i32 = 0,
    source_id: i64 = 0,
    action: ?action_union,

    pub const _action_case = enum {
        slide,
        dodge_point_loss,
        reflect_damages,
        reduce_damages,
        reflect_spell,
        removable_effect,
        life_points_lost,
        life_points_gain,
        spell_immunity,
        spell_cool_down_variation,
        vanish,
        kill,
        death,
        targeted_ability,
        tackled,
        points_variation,
        invisible_detected,
        teleport_on_same_map,
        exchange_positions,
        spell_remove,
        modify_effects_duration,
        steal_kama,
        change_look,
        invisibility,
        summons,
        mark_cells,
        unmark_cells,
        trigger_glyph_trap,
        activate_glyph_trap,
        carry_character,
        throw_character,
        drop_character,
        execute_script,
    };
    pub const action_union = union(_action_case) {
        slide: Slide,
        dodge_point_loss: DodgePointLoss,
        reflect_damages: ReflectDamages,
        reduce_damages: ReduceDamages,
        reflect_spell: ReflectSpell,
        removable_effect: RemovableEffect,
        life_points_lost: LifePointsLost,
        life_points_gain: LifePointsGain,
        spell_immunity: SpellImmunity,
        spell_cool_down_variation: SpellCoolDownVariation,
        vanish: Vanish,
        kill: Kill,
        death: Death,
        targeted_ability: TargetedAbility,
        tackled: Tackled,
        points_variation: PointsVariation,
        invisible_detected: InvisibleDetected,
        teleport_on_same_map: TeleportOnSameMap,
        exchange_positions: ExchangePositions,
        spell_remove: SpellRemove,
        modify_effects_duration: ModifyEffectsDuration,
        steal_kama: StealKama,
        change_look: ChangeLook,
        invisibility: Invisibility,
        summons: Summons,
        mark_cells: MarkCells,
        unmark_cells: UnmarkCells,
        trigger_glyph_trap: TriggerGlyphTrap,
        activate_glyph_trap: ActivateGlyphTrap,
        carry_character: CarryCharacter,
        throw_character: ThrowCharacter,
        drop_character: DropCharacter,
        execute_script: ExecuteScript,
        pub const _union_desc = .{
            .slide = fd(3, .{ .SubMessage = {} }),
            .dodge_point_loss = fd(4, .{ .SubMessage = {} }),
            .reflect_damages = fd(5, .{ .SubMessage = {} }),
            .reduce_damages = fd(6, .{ .SubMessage = {} }),
            .reflect_spell = fd(7, .{ .SubMessage = {} }),
            .removable_effect = fd(8, .{ .SubMessage = {} }),
            .life_points_lost = fd(9, .{ .SubMessage = {} }),
            .life_points_gain = fd(10, .{ .SubMessage = {} }),
            .spell_immunity = fd(11, .{ .SubMessage = {} }),
            .spell_cool_down_variation = fd(12, .{ .SubMessage = {} }),
            .vanish = fd(13, .{ .SubMessage = {} }),
            .kill = fd(14, .{ .SubMessage = {} }),
            .death = fd(15, .{ .SubMessage = {} }),
            .targeted_ability = fd(16, .{ .SubMessage = {} }),
            .tackled = fd(17, .{ .SubMessage = {} }),
            .points_variation = fd(18, .{ .SubMessage = {} }),
            .invisible_detected = fd(19, .{ .SubMessage = {} }),
            .teleport_on_same_map = fd(20, .{ .SubMessage = {} }),
            .exchange_positions = fd(21, .{ .SubMessage = {} }),
            .spell_remove = fd(22, .{ .SubMessage = {} }),
            .modify_effects_duration = fd(23, .{ .SubMessage = {} }),
            .steal_kama = fd(24, .{ .SubMessage = {} }),
            .change_look = fd(25, .{ .SubMessage = {} }),
            .invisibility = fd(26, .{ .SubMessage = {} }),
            .summons = fd(27, .{ .SubMessage = {} }),
            .mark_cells = fd(28, .{ .SubMessage = {} }),
            .unmark_cells = fd(29, .{ .SubMessage = {} }),
            .trigger_glyph_trap = fd(30, .{ .SubMessage = {} }),
            .activate_glyph_trap = fd(31, .{ .SubMessage = {} }),
            .carry_character = fd(32, .{ .SubMessage = {} }),
            .throw_character = fd(33, .{ .SubMessage = {} }),
            .drop_character = fd(34, .{ .SubMessage = {} }),
            .execute_script = fd(35, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .action_id = fd(1, .{ .Varint = .Simple }),
        .source_id = fd(2, .{ .Varint = .Simple }),
        .action = fd(null, .{ .OneOf = action_union }),
    };

    pub const CarryCharacter = struct {
        target_id: i64 = 0,
        cell: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(3, .{ .Varint = .Simple }),
            .cell = fd(4, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ThrowCharacter = struct {
        target_id: i64 = 0,
        cell: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(3, .{ .Varint = .Simple }),
            .cell = fd(4, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const DropCharacter = struct {
        target_id: i64 = 0,
        cell: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(3, .{ .Varint = .Simple }),
            .cell = fd(4, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ExecuteScript = struct {
        script_usage_id: i32 = 0,
        critical: bool = false,
        spell_id: i32 = 0,
        spell_rank: i32 = 0,
        cell: i32 = 0,

        pub const _desc_table = .{
            .script_usage_id = fd(1, .{ .Varint = .Simple }),
            .critical = fd(2, .{ .Varint = .Simple }),
            .spell_id = fd(3, .{ .Varint = .Simple }),
            .spell_rank = fd(4, .{ .Varint = .Simple }),
            .cell = fd(5, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const UnmarkCells = struct {
        mark_id: i32 = 0,

        pub const _desc_table = .{
            .mark_id = fd(1, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const TriggerGlyphTrap = struct {
        mark_id: i32 = 0,
        mark_impact_cell: i32 = 0,
        triggering_character_id: i64 = 0,

        pub const _desc_table = .{
            .mark_id = fd(1, .{ .Varint = .Simple }),
            .mark_impact_cell = fd(2, .{ .Varint = .Simple }),
            .triggering_character_id = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ActivateGlyphTrap = struct {
        mark_id: i32 = 0,
        active: bool = false,

        pub const _desc_table = .{
            .mark_id = fd(1, .{ .Varint = .Simple }),
            .active = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Invisibility = struct {
        target_id: i64 = 0,
        invisibility_state: com_ankama_dofus_server_game_protocol_common.FightInvisibilityState = @enumFromInt(0),

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .invisibility_state = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Summons = struct {
        summons: ?summons_union,

        pub const _summons_case = enum {
            summons_by_actor,
            summons_by_context_information,
        };
        pub const summons_union = union(_summons_case) {
            summons_by_actor: SummonsByActor,
            summons_by_context_information: SummonsByContextInformation,
            pub const _union_desc = .{
                .summons_by_actor = fd(1, .{ .SubMessage = {} }),
                .summons_by_context_information = fd(2, .{ .SubMessage = {} }),
            };
        };

        pub const _desc_table = .{
            .summons = fd(null, .{ .OneOf = summons_union }),
        };

        pub const SummonsByActor = struct {
            summons: ArrayList(com_ankama_dofus_server_game_protocol_common.ActorPositionInformation),

            pub const _desc_table = .{
                .summons = fd(1, .{ .List = .{ .SubMessage = {} } }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const SummonsByContextInformation = struct {
            summons: ArrayList(SummonContextInformation),

            pub const _desc_table = .{
                .summons = fd(1, .{ .List = .{ .SubMessage = {} } }),
            };

            pub const SummonContextInformation = struct {
                spawn_information: ?EntitySpawnInformation = null,
                wave: i32 = 0,
                look: ?com_ankama_dofus_server_game_protocol_common.EntityLook = null,
                characteristics: ?com_ankama_dofus_server_game_protocol_common.FightCharacteristics = null,
                summons: ArrayList(com_ankama_dofus_server_game_protocol_common.SpawnInformation),

                pub const _desc_table = .{
                    .spawn_information = fd(1, .{ .SubMessage = {} }),
                    .wave = fd(2, .{ .Varint = .Simple }),
                    .look = fd(3, .{ .SubMessage = {} }),
                    .characteristics = fd(4, .{ .SubMessage = {} }),
                    .summons = fd(5, .{ .List = .{ .SubMessage = {} } }),
                };

                pub usingnamespace protobuf.MessageMixins(@This());
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const MarkCells = struct {
        mark: ?com_ankama_dofus_server_game_protocol_common.FightMark = null,

        pub const _desc_table = .{
            .mark = fd(1, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ModifyEffectsDuration = struct {
        target_id: i64 = 0,
        delta: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(3, .{ .Varint = .Simple }),
            .delta = fd(4, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const StealKama = struct {
        target_id: i64 = 0,
        amount: i64 = 0,

        pub const _desc_table = .{
            .target_id = fd(3, .{ .Varint = .Simple }),
            .amount = fd(4, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ChangeLook = struct {
        target_id: i64 = 0,
        look: ?com_ankama_dofus_server_game_protocol_common.EntityLook = null,

        pub const _desc_table = .{
            .target_id = fd(3, .{ .Varint = .Simple }),
            .look = fd(4, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const TeleportOnSameMap = struct {
        target_id: i64 = 0,
        cell: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .cell = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ExchangePositions = struct {
        target_id: i64 = 0,
        caster_cell_id: i32 = 0,
        target_cell_id: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .caster_cell_id = fd(2, .{ .Varint = .Simple }),
            .target_cell_id = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const SpellRemove = struct {
        target_id: i64 = 0,
        verbose_cast: bool = false,
        complement: ?complement_union,

        pub const _complement_case = enum {
            effect_remove,
            spell_id,
        };
        pub const complement_union = union(_complement_case) {
            effect_remove: EffectRemove,
            spell_id: i32,
            pub const _union_desc = .{
                .effect_remove = fd(3, .{ .SubMessage = {} }),
                .spell_id = fd(4, .{ .Varint = .Simple }),
            };
        };

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .verbose_cast = fd(2, .{ .Varint = .Simple }),
            .complement = fd(null, .{ .OneOf = complement_union }),
        };

        pub const EffectRemove = struct {
            effect: i32 = 0,
            trigger: bool = false,

            pub const _desc_table = .{
                .effect = fd(1, .{ .Varint = .Simple }),
                .trigger = fd(2, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Tackled = struct {
        tacklers_id: ArrayList(i64),

        pub const _desc_table = .{
            .tacklers_id = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const PointsVariation = struct {
        target_id: i64 = 0,
        delta: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .delta = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const InvisibleDetected = struct {
        target_id: i64 = 0,
        cell: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .cell = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const TargetedAbility = struct {
        target_id: i64 = 0,
        destination_cell: i32 = 0,
        critical: FightSpellCastCritical = @enumFromInt(0),
        silent_cast: bool = false,
        verbose_cast: bool = false,
        fight: ?fight_union,

        pub const _fight_case = enum {
            spell_cast,
            weapon_generic_id,
        };
        pub const fight_union = union(_fight_case) {
            spell_cast: SpellCast,
            weapon_generic_id: i32,
            pub const _union_desc = .{
                .spell_cast = fd(6, .{ .SubMessage = {} }),
                .weapon_generic_id = fd(7, .{ .Varint = .Simple }),
            };
        };

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .destination_cell = fd(2, .{ .Varint = .Simple }),
            .critical = fd(3, .{ .Varint = .Simple }),
            .silent_cast = fd(4, .{ .Varint = .Simple }),
            .verbose_cast = fd(5, .{ .Varint = .Simple }),
            .fight = fd(null, .{ .OneOf = fight_union }),
        };

        pub const SpellCast = struct {
            spell_id: i32 = 0,
            spell_level: i32 = 0,
            portals_id: ArrayList(i32),

            pub const _desc_table = .{
                .spell_id = fd(1, .{ .Varint = .Simple }),
                .spell_level = fd(2, .{ .Varint = .Simple }),
                .portals_id = fd(3, .{ .PackedList = .{ .Varint = .Simple } }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Vanish = struct {
        target_id: i64 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Kill = struct {
        target_id: i64 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Death = struct {
        target_id: i64 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const SpellImmunity = struct {
        target_id: i64 = 0,
        spell_id: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .spell_id = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const SpellCoolDownVariation = struct {
        target_id: i64 = 0,
        spell_id: i32 = 0,
        value: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .spell_id = fd(2, .{ .Varint = .Simple }),
            .value = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const LifePointsLost = struct {
        target_id: i64 = 0,
        loss: i32 = 0,
        permanent_damages: i32 = 0,
        element_id: i32 = 0,
        shield_loss: ?i32 = null,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .loss = fd(2, .{ .Varint = .Simple }),
            .permanent_damages = fd(3, .{ .Varint = .Simple }),
            .element_id = fd(4, .{ .Varint = .Simple }),
            .shield_loss = fd(5, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const LifePointsGain = struct {
        target_id: i64 = 0,
        delta: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .delta = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const RemovableEffect = struct {
        effect: ?com_ankama_dofus_server_game_protocol_common.FightRemovableEffect = null,

        pub const _desc_table = .{
            .effect = fd(1, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Slide = struct {
        target_id: i64 = 0,
        start_cell: i32 = 0,
        end_cell: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .start_cell = fd(2, .{ .Varint = .Simple }),
            .end_cell = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const DodgePointLoss = struct {
        target_id: i64 = 0,
        amount: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .amount = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ReflectDamages = struct {
        target_id: i64 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ReduceDamages = struct {
        target_id: i64 = 0,
        amount: i32 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
            .amount = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const ReflectSpell = struct {
        target_id: i64 = 0,

        pub const _desc_table = .{
            .target_id = fd(1, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GameActionUpdateEffectTriggerCountEvent = struct {
    effects_count_on_target: ArrayList(FightEffectTriggerCount),

    pub const _desc_table = .{
        .effects_count_on_target = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const FightEffectTriggerCount = struct {
        effect_id: i32 = 0,
        target_id: i64 = 0,
        count: i32 = 0,

        pub const _desc_table = .{
            .effect_id = fd(1, .{ .Varint = .Simple }),
            .target_id = fd(2, .{ .Varint = .Simple }),
            .count = fd(3, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SequenceStartEvent = struct {
    sequence_type: SequenceType = @enumFromInt(0),
    author_id: i64 = 0,

    pub const _desc_table = .{
        .sequence_type = fd(1, .{ .Varint = .Simple }),
        .author_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SequenceEndEvent = struct {
    action_id: i32 = 0,
    author_id: i64 = 0,
    sequence_type: SequenceType = @enumFromInt(0),

    pub const _desc_table = .{
        .action_id = fd(1, .{ .Varint = .Simple }),
        .author_id = fd(2, .{ .Varint = .Simple }),
        .sequence_type = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const EntitySpawnInformation = struct {
    spawn_information: ?spawn_information_union,

    pub const _spawn_information_case = enum {
        monster,
        character,
        companion,
    };
    pub const spawn_information_union = union(_spawn_information_case) {
        monster: Monster,
        character: Character,
        companion: Companion,
        pub const _union_desc = .{
            .monster = fd(1, .{ .SubMessage = {} }),
            .character = fd(2, .{ .SubMessage = {} }),
            .companion = fd(3, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .spawn_information = fd(null, .{ .OneOf = spawn_information_union }),
    };

    pub const Monster = struct {
        monster_gid: i32 = 0,
        invocation_information: ?invocation_information_union,

        pub const _invocation_information_case = enum {
            grade,
            level,
        };
        pub const invocation_information_union = union(_invocation_information_case) {
            grade: i32,
            level: i32,
            pub const _union_desc = .{
                .grade = fd(2, .{ .Varint = .Simple }),
                .level = fd(3, .{ .Varint = .Simple }),
            };
        };

        pub const _desc_table = .{
            .monster_gid = fd(1, .{ .Varint = .Simple }),
            .invocation_information = fd(null, .{ .OneOf = invocation_information_union }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Character = struct {
        name: ManagedString = .Empty,
        level: i32 = 0,

        pub const _desc_table = .{
            .name = fd(1, .String),
            .level = fd(2, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Companion = struct {
        model_id: i32 = 0,
        level: i32 = 0,
        summoner_id: i64 = 0,
        owner_id: i64 = 0,

        pub const _desc_table = .{
            .model_id = fd(1, .{ .Varint = .Simple }),
            .level = fd(2, .{ .Varint = .Simple }),
            .summoner_id = fd(3, .{ .Varint = .Simple }),
            .owner_id = fd(4, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
