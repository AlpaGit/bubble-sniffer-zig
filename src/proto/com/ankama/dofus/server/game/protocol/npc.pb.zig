// Code generated by protoc-gen-zig
///! package com.ankama.dofus.server.game.protocol.npc
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
/// import package com.ankama.dofus.server.game.protocol.common
const com_ankama_dofus_server_game_protocol_common = @import("common.pb.zig");

pub const NpcGenericActionRequest = struct {
    npc_id: i32 = 0,
    npc_action_id: i32 = 0,
    npc_map_id: i64 = 0,

    pub const _desc_table = .{
        .npc_id = fd(1, .{ .Varint = .Simple }),
        .npc_action_id = fd(2, .{ .Varint = .Simple }),
        .npc_map_id = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NpcDialogReplyRequest = struct {
    reply_id: i32 = 0,

    pub const _desc_table = .{
        .reply_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NpcsMapQuestStatusUpdateEvent = struct {
    map_information: ArrayList(MapNpcQuest),

    pub const _desc_table = .{
        .map_information = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const MapNpcQuest = struct {
        map_id: i64 = 0,
        npcs_with_quests: ArrayList(NpcWithQuest),

        pub const _desc_table = .{
            .map_id = fd(1, .{ .Varint = .Simple }),
            .npcs_with_quests = fd(2, .{ .List = .{ .SubMessage = {} } }),
        };

        pub const NpcWithQuest = struct {
            npc_id: i32 = 0,
            quests_to_validate: ArrayList(i32),
            quests_to_start: ArrayList(i32),

            pub const _desc_table = .{
                .npc_id = fd(1, .{ .Varint = .Simple }),
                .quests_to_validate = fd(2, .{ .PackedList = .{ .Varint = .Simple } }),
                .quests_to_start = fd(3, .{ .PackedList = .{ .Varint = .Simple } }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NpcGenericActionFailureEvent = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NpcDialogCreationEvent = struct {
    map_id: i64 = 0,
    npc_id: i32 = 0,
    portal_type: ?PortalType = null,

    pub const _desc_table = .{
        .map_id = fd(1, .{ .Varint = .Simple }),
        .npc_id = fd(2, .{ .Varint = .Simple }),
        .portal_type = fd(3, .{ .Varint = .Simple }),
    };

    pub const PortalType = enum(i32) {
        UNSUPPORTED = 0,
        ENUTROSOR = 1,
        SRAMBAD = 2,
        XELORIUM = 3,
        ECAFLIPUS = 4,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const NpcDialogQuestionEvent = struct {
    message_id: i32 = 0,
    dialog_params: ArrayList(ManagedString),
    visible_replies: ArrayList(VisibleReply),

    pub const _desc_table = .{
        .message_id = fd(1, .{ .Varint = .Simple }),
        .dialog_params = fd(2, .{ .List = .String }),
        .visible_replies = fd(3, .{ .List = .{ .SubMessage = {} } }),
    };

    pub const VisibleReply = struct {
        reply_id: i32 = 0,
        actions: ArrayList(ActionInformation),

        pub const _desc_table = .{
            .reply_id = fd(1, .{ .Varint = .Simple }),
            .actions = fd(2, .{ .List = .{ .SubMessage = {} } }),
        };

        pub const ActionInformation = struct {
            id: i32 = 0,
            is_repeatable: ?bool = null,

            pub const _desc_table = .{
                .id = fd(1, .{ .Varint = .Simple }),
                .is_repeatable = fd(2, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const TaxCollectorDialogQuestionEvent = struct {
    alliance_information: ?com_ankama_dofus_server_game_protocol_common.AllianceInformation = null,
    max_pods: i32 = 0,
    prospecting: i32 = 0,
    tax_collectors_count: i32 = 0,
    looted_pods: i32 = 0,
    looted_items_value: i64 = 0,
    possible_attack: ?i32 = null,

    pub const _desc_table = .{
        .alliance_information = fd(1, .{ .SubMessage = {} }),
        .max_pods = fd(2, .{ .Varint = .Simple }),
        .prospecting = fd(3, .{ .Varint = .Simple }),
        .tax_collectors_count = fd(4, .{ .Varint = .Simple }),
        .looted_pods = fd(6, .{ .Varint = .Simple }),
        .looted_items_value = fd(7, .{ .Varint = .Simple }),
        .possible_attack = fd(5, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PrismDialogQuestionEvent = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const EntityTalkEvent = struct {
    entity_id: i64 = 0,
    text_id: i32 = 0,
    parameters: ArrayList(ManagedString),

    pub const _desc_table = .{
        .entity_id = fd(1, .{ .Varint = .Simple }),
        .text_id = fd(2, .{ .Varint = .Simple }),
        .parameters = fd(3, .{ .List = .String }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PlaySpellScriptOnNpcEvent = struct {
    npc_id: i32 = 0,
    script_id: i32 = 0,

    pub const _desc_table = .{
        .npc_id = fd(1, .{ .Varint = .Simple }),
        .script_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PlayAnimationOnNpcEvent = struct {
    npc_id: i32 = 0,
    animation: ManagedString = .Empty,

    pub const _desc_table = .{
        .npc_id = fd(1, .{ .Varint = .Simple }),
        .animation = fd(2, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const PlayEmoteOnNpcEvent = struct {
    npc_id: i32 = 0,
    emote_id: i32 = 0,

    pub const _desc_table = .{
        .npc_id = fd(1, .{ .Varint = .Simple }),
        .emote_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
