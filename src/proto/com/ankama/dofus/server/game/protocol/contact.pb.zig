// Code generated by protoc-gen-zig
///! package com.ankama.dofus.server.game.protocol.contact
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
/// import package com.ankama.dofus.server.game.protocol.common
const com_ankama_dofus_server_game_protocol_common = @import("common.pb.zig");

pub const AddFailureReason = enum(i32) {
    UNKNOWN = 0,
    OVER_QUOTA = 1,
    NOT_FOUND = 2,
    EGOCENTRIC = 3,
    IS_DOUBLE = 4,
    IS_CONFLICTING_DOUBLE = 5,
    _,
};

pub const ContactWarnOnAchievementCompleteSetRequest = struct {
    enable: bool = false,

    pub const _desc_table = .{
        .enable = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContactLookRequest = struct {
    request_id: i32 = 0,
    contact_type: SocialContactCategory = @enumFromInt(0),
    complement: ?complement_union,

    pub const _complement_case = enum {
        name,
        id,
    };
    pub const complement_union = union(_complement_case) {
        name: ManagedString,
        id: i64,
        pub const _union_desc = .{
            .name = fd(3, .String),
            .id = fd(4, .{ .Varint = .Simple }),
        };
    };

    pub const _desc_table = .{
        .request_id = fd(1, .{ .Varint = .Simple }),
        .contact_type = fd(2, .{ .Varint = .Simple }),
        .complement = fd(null, .{ .OneOf = complement_union }),
    };

    pub const SocialContactCategory = enum(i32) {
        FRIEND = 0,
        SPOUSE = 1,
        PARTY = 2,
        GUILD = 3,
        ALLIANCE = 4,
        CRAFTER = 5,
        INTERLOCUTOR = 6,
        FIGHT = 7,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendAddRequest = struct {
    target: ?com_ankama_dofus_server_game_protocol_common.PlayerSearch = null,

    pub const _desc_table = .{
        .target = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendDeleteRequest = struct {
    account_id: i64 = 0,

    pub const _desc_table = .{
        .account_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendSetWarnOnConnectionRequest = struct {
    enable: bool = false,

    pub const _desc_table = .{
        .enable = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendSetWarnOnLevelGainRequest = struct {
    enable: bool = false,

    pub const _desc_table = .{
        .enable = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendSetStatusShareRequest = struct {
    share: bool = false,

    pub const _desc_table = .{
        .share = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const IgnoreRequest = struct {
    player_search: ?com_ankama_dofus_server_game_protocol_common.PlayerSearch = null,

    pub const _desc_table = .{
        .player_search = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UnIgnoreRequest = struct {
    account_id: i64 = 0,

    pub const _desc_table = .{
        .account_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BlockListRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BlockRequest = struct {
    player_search: ?com_ankama_dofus_server_game_protocol_common.PlayerSearch = null,

    pub const _desc_table = .{
        .player_search = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UnBlockRequest = struct {
    account_id: i64 = 0,

    pub const _desc_table = .{
        .account_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendListRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AcquaintanceListRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContactWarnOnPermanentDeathSetRequest = struct {
    enable: bool = false,

    pub const _desc_table = .{
        .enable = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContactWarnOnAchievementCompleteStateEvent = struct {
    enable: bool = false,

    pub const _desc_table = .{
        .enable = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContactLookEvent = struct {
    request_id: i32 = 0,
    player_name: ManagedString = .Empty,
    player_id: i64 = 0,
    look: ?com_ankama_dofus_server_game_protocol_common.EntityLook = null,

    pub const _desc_table = .{
        .request_id = fd(1, .{ .Varint = .Simple }),
        .player_name = fd(2, .String),
        .player_id = fd(3, .{ .Varint = .Simple }),
        .look = fd(4, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContactLookErrorEvent = struct {
    request_id: i32 = 0,

    pub const _desc_table = .{
        .request_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendAddFailureEvent = struct {
    reason: AddFailureReason = @enumFromInt(0),

    pub const _desc_table = .{
        .reason = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AcquaintanceAddedEvent = struct {
    acquaintance: ?AcquaintanceInformation = null,

    pub const _desc_table = .{
        .acquaintance = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendAddedEvent = struct {
    friend: ?FriendInformation = null,

    pub const _desc_table = .{
        .friend = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendDeletionResultEvent = struct {
    success: bool = false,
    account_tag: ?com_ankama_dofus_server_game_protocol_common.AccountTag = null,

    pub const _desc_table = .{
        .success = fd(1, .{ .Varint = .Simple }),
        .account_tag = fd(2, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendWarnOnConnectionStateEvent = struct {
    enable: bool = false,

    pub const _desc_table = .{
        .enable = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const WarnOnPermanentDeathStateEvent = struct {
    enable: bool = false,

    pub const _desc_table = .{
        .enable = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendWarnOnLevelGainStateEvent = struct {
    enable: bool = false,

    pub const _desc_table = .{
        .enable = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendStatusShareStateEvent = struct {
    share: bool = false,

    pub const _desc_table = .{
        .share = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const IgnoreEvent = struct {
    result: ?result_union,

    pub const _result_case = enum {
        @"error",
        success,
    };
    pub const result_union = union(_result_case) {
        @"error": Error,
        success: Success,
        pub const _union_desc = .{
            .@"error" = fd(1, .{ .SubMessage = {} }),
            .success = fd(2, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .result = fd(null, .{ .OneOf = result_union }),
    };

    pub const Error = struct {
        reason: AddFailureReason = @enumFromInt(0),

        pub const _desc_table = .{
            .reason = fd(1, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Success = struct {
        ignored: ?ContactInformation = null,

        pub const _desc_table = .{
            .ignored = fd(1, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UnIgnoreEvent = struct {
    result: ?result_union,

    pub const _result_case = enum {
        @"error",
        success,
    };
    pub const result_union = union(_result_case) {
        @"error": Error,
        success: Success,
        pub const _union_desc = .{
            .@"error" = fd(1, .{ .SubMessage = {} }),
            .success = fd(2, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .result = fd(null, .{ .OneOf = result_union }),
    };

    pub const Error = struct {
        pub const _desc_table = .{};

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Success = struct {
        ignored_tag: ?com_ankama_dofus_server_game_protocol_common.AccountTag = null,

        pub const _desc_table = .{
            .ignored_tag = fd(1, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BlockListEvent = struct {
    blocked: ArrayList(ContactInformation),

    pub const _desc_table = .{
        .blocked = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const BlockEvent = struct {
    result: ?result_union,

    pub const _result_case = enum {
        @"error",
        success,
    };
    pub const result_union = union(_result_case) {
        @"error": Error,
        success: Success,
        pub const _union_desc = .{
            .@"error" = fd(1, .{ .SubMessage = {} }),
            .success = fd(2, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .result = fd(null, .{ .OneOf = result_union }),
    };

    pub const Error = struct {
        reason: AddFailureReason = @enumFromInt(0),

        pub const _desc_table = .{
            .reason = fd(1, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Success = struct {
        blocked: ?ContactInformation = null,

        pub const _desc_table = .{
            .blocked = fd(1, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UnBlockEvent = struct {
    result: ?result_union,

    pub const _result_case = enum {
        @"error",
        success,
    };
    pub const result_union = union(_result_case) {
        @"error": Error,
        success: Success,
        pub const _union_desc = .{
            .@"error" = fd(1, .{ .SubMessage = {} }),
            .success = fd(2, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .result = fd(null, .{ .OneOf = result_union }),
    };

    pub const Error = struct {
        pub const _desc_table = .{};

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const Success = struct {
        tag: ?com_ankama_dofus_server_game_protocol_common.AccountTag = null,

        pub const _desc_table = .{
            .tag = fd(1, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AddContactFailureEvent = struct {
    reason: AddFailureReason = @enumFromInt(0),

    pub const _desc_table = .{
        .reason = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendListEvent = struct {
    friend: ArrayList(FriendInformation),

    pub const _desc_table = .{
        .friend = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AcquaintanceListEvent = struct {
    acquaintance: ArrayList(AcquaintanceInformation),

    pub const _desc_table = .{
        .acquaintance = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContactLevelUpEvent = struct {
    name: ManagedString = .Empty,
    character_id: i64 = 0,
    level: i32 = 0,

    pub const _desc_table = .{
        .name = fd(1, .String),
        .character_id = fd(2, .{ .Varint = .Simple }),
        .level = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FriendInformation = struct {
    account_id: i64 = 0,
    account_tag: ?com_ankama_dofus_server_game_protocol_common.AccountTag = null,
    state: com_ankama_dofus_server_game_protocol_common.CharacterState = @enumFromInt(0),
    duration_since_last_connection_hours: i64 = 0,
    league_id: i32 = 0,
    online_information: ?FriendOnlineInformation = null,

    pub const _desc_table = .{
        .account_id = fd(1, .{ .Varint = .Simple }),
        .account_tag = fd(2, .{ .SubMessage = {} }),
        .state = fd(3, .{ .Varint = .Simple }),
        .duration_since_last_connection_hours = fd(4, .{ .Varint = .Simple }),
        .league_id = fd(5, .{ .Varint = .Simple }),
        .online_information = fd(6, .{ .SubMessage = {} }),
    };

    pub const FriendOnlineInformation = struct {
        character_id: i64 = 0,
        character_name: ManagedString = .Empty,
        character_level: i32 = 0,
        alignment: com_ankama_dofus_server_game_protocol_common.Alignment = @enumFromInt(0),
        breed_id: i32 = 0,
        gender: com_ankama_dofus_server_game_protocol_common.Gender = @enumFromInt(0),
        mood_smiley_id: i32 = 0,
        haven_bag_shared: bool = false,
        status: ?com_ankama_dofus_server_game_protocol_common.CharacterStatus = null,
        guild: ?com_ankama_dofus_server_game_protocol_common.GuildInformation = null,
        alliance: ?com_ankama_dofus_server_game_protocol_common.AllianceInformation = null,
        achievement_points: i32 = 0,
        ladder_position: i32 = 0,

        pub const _desc_table = .{
            .character_id = fd(1, .{ .Varint = .Simple }),
            .character_name = fd(2, .String),
            .character_level = fd(3, .{ .Varint = .Simple }),
            .alignment = fd(4, .{ .Varint = .Simple }),
            .breed_id = fd(5, .{ .Varint = .Simple }),
            .gender = fd(6, .{ .Varint = .Simple }),
            .mood_smiley_id = fd(7, .{ .Varint = .Simple }),
            .haven_bag_shared = fd(8, .{ .Varint = .Simple }),
            .status = fd(9, .{ .SubMessage = {} }),
            .guild = fd(10, .{ .SubMessage = {} }),
            .alliance = fd(11, .{ .SubMessage = {} }),
            .achievement_points = fd(12, .{ .Varint = .Simple }),
            .ladder_position = fd(13, .{ .Varint = .Simple }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const AcquaintanceInformation = struct {
    account_id: i64 = 0,
    account_tag: ?com_ankama_dofus_server_game_protocol_common.AccountTag = null,
    state: com_ankama_dofus_server_game_protocol_common.CharacterState = @enumFromInt(0),
    online: ?OnlineInformation = null,

    pub const _desc_table = .{
        .account_id = fd(1, .{ .Varint = .Simple }),
        .account_tag = fd(2, .{ .SubMessage = {} }),
        .state = fd(3, .{ .Varint = .Simple }),
        .online = fd(4, .{ .SubMessage = {} }),
    };

    pub const OnlineInformation = struct {
        character_id: i64 = 0,
        character_name: ManagedString = .Empty,
        mood_smiley_id: i32 = 0,
        status: ?com_ankama_dofus_server_game_protocol_common.CharacterStatus = null,

        pub const _desc_table = .{
            .character_id = fd(1, .{ .Varint = .Simple }),
            .character_name = fd(2, .String),
            .mood_smiley_id = fd(3, .{ .Varint = .Simple }),
            .status = fd(4, .{ .SubMessage = {} }),
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ContactInformation = struct {
    account_id: i64 = 0,
    account_tag: ?com_ankama_dofus_server_game_protocol_common.AccountTag = null,

    pub const _desc_table = .{
        .account_id = fd(1, .{ .Varint = .Simple }),
        .account_tag = fd(2, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
