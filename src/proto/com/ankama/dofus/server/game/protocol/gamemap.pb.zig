// Code generated by protoc-gen-zig
///! package com.ankama.dofus.server.game.protocol.gamemap
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;
/// import package com.ankama.dofus.server.game.protocol.common
const com_ankama_dofus_server_game_protocol_common = @import("common.pb.zig");

pub const MapMovementRequest = struct {
    key_cells: ArrayList(i32),
    map_id: i64 = 0,
    cautious: bool = false,

    pub const _desc_table = .{
        .key_cells = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
        .map_id = fd(2, .{ .Varint = .Simple }),
        .cautious = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapMovementCancelRequest = struct {
    cell_id: i32 = 0,

    pub const _desc_table = .{
        .cell_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapMovementConfirmRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapChangeOrientationRequest = struct {
    direction: com_ankama_dofus_server_game_protocol_common.Direction = @enumFromInt(0),

    pub const _desc_table = .{
        .direction = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapErrorNotFoundRequest = struct {
    map_id: i32 = 0,

    pub const _desc_table = .{
        .map_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapChangeRequest = struct {
    map_id: i32 = 0,
    auto_pilot: bool = false,

    pub const _desc_table = .{
        .map_id = fd(1, .{ .Varint = .Simple }),
        .auto_pilot = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapRunningFightsRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapRunningFightStopListeningRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapRunningFightDetailsRequest = struct {
    fight_id: i32 = 0,

    pub const _desc_table = .{
        .fight_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapInformationRequest = struct {
    map_id: i32 = 0,

    pub const _desc_table = .{
        .map_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapMovementRefusedEvent = struct {
    cell_x: i32 = 0,
    cell_y: i32 = 0,

    pub const _desc_table = .{
        .cell_x = fd(1, .{ .Varint = .Simple }),
        .cell_y = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapMovementEvent = struct {
    cells: ArrayList(i32),
    character_id: i64 = 0,
    cautious: bool = false,
    direction: ?i32 = null,

    pub const _desc_table = .{
        .cells = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
        .character_id = fd(3, .{ .Varint = .Simple }),
        .cautious = fd(4, .{ .Varint = .Simple }),
        .direction = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapChangeOrientationEvent = struct {
    actor_id: i64 = 0,
    direction: com_ankama_dofus_server_game_protocol_common.Direction = @enumFromInt(0),

    pub const _desc_table = .{
        .actor_id = fd(1, .{ .Varint = .Simple }),
        .direction = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapCurrentEvent = struct {
    map_id: i64 = 0,

    pub const _desc_table = .{
        .map_id = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapCurrentInstanceEvent = struct {
    map_id: i64 = 0,
    instantiate_map_id: i64 = 0,

    pub const _desc_table = .{
        .map_id = fd(1, .{ .Varint = .Simple }),
        .instantiate_map_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapTeleportOnSameEvent = struct {
    player_id: i64 = 0,
    cell_id: i32 = 0,

    pub const _desc_table = .{
        .player_id = fd(1, .{ .Varint = .Simple }),
        .cell_id = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapFightCountEvent = struct {
    fight_count: i32 = 0,

    pub const _desc_table = .{
        .fight_count = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapRunningFightsEvent = struct {
    fights: ArrayList(com_ankama_dofus_server_game_protocol_common.FightExternalInformation),

    pub const _desc_table = .{
        .fights = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapRunningFightDetailsEvent = struct {
    fight_id: i32 = 0,
    attackers: ArrayList(com_ankama_dofus_server_game_protocol_common.FighterLightInformation),
    defenders: ArrayList(com_ankama_dofus_server_game_protocol_common.FighterLightInformation),

    pub const _desc_table = .{
        .fight_id = fd(1, .{ .Varint = .Simple }),
        .attackers = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .defenders = fd(3, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapRunningFightDetailsExtendedEvent = struct {
    fight_id: i32 = 0,
    attackers: ArrayList(com_ankama_dofus_server_game_protocol_common.FighterLightInformation),
    defenders: ArrayList(com_ankama_dofus_server_game_protocol_common.FighterLightInformation),
    named_party_teams: ArrayList(com_ankama_dofus_server_game_protocol_common.NamedPartyTeam),

    pub const _desc_table = .{
        .fight_id = fd(1, .{ .Varint = .Simple }),
        .attackers = fd(2, .{ .List = .{ .SubMessage = {} } }),
        .defenders = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .named_party_teams = fd(4, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapObstacleUpdateEvent = struct {
    obstacles: ArrayList(MapObstacle),

    pub const _desc_table = .{
        .obstacles = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapComplementaryInformationEvent = struct {
    subarea_id: i32 = 0,
    map_id: i64 = 0,
    houses: ArrayList(com_ankama_dofus_server_game_protocol_common.House),
    actors: ArrayList(com_ankama_dofus_server_game_protocol_common.ActorPositionInformation),
    interactive_elements: ArrayList(com_ankama_dofus_server_game_protocol_common.InteractiveElement),
    stated_elements: ArrayList(com_ankama_dofus_server_game_protocol_common.StatedElement),
    obstacles: ArrayList(MapObstacle),
    fights: ArrayList(com_ankama_dofus_server_game_protocol_common.FightCommonInformation),
    has_aggressive_monsters: bool = false,
    specific_complementary_information: ?specific_complementary_information_union,

    pub const _specific_complementary_information_case = enum {
        in_house_information,
        coordinates,
        breach_information,
        anomaly_information,
        haven_bag_information,
    };
    pub const specific_complementary_information_union = union(_specific_complementary_information_case) {
        in_house_information: MapComplementaryInHouseInformation,
        coordinates: com_ankama_dofus_server_game_protocol_common.MapCoordinates,
        breach_information: MapComplementaryBreachInformation,
        anomaly_information: MapComplementaryAnomalyInformation,
        haven_bag_information: MapComplementaryHavenBagInformation,
        pub const _union_desc = .{
            .in_house_information = fd(10, .{ .SubMessage = {} }),
            .coordinates = fd(11, .{ .SubMessage = {} }),
            .breach_information = fd(12, .{ .SubMessage = {} }),
            .anomaly_information = fd(13, .{ .SubMessage = {} }),
            .haven_bag_information = fd(14, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .subarea_id = fd(1, .{ .Varint = .Simple }),
        .map_id = fd(2, .{ .Varint = .Simple }),
        .houses = fd(3, .{ .List = .{ .SubMessage = {} } }),
        .actors = fd(4, .{ .List = .{ .SubMessage = {} } }),
        .interactive_elements = fd(5, .{ .List = .{ .SubMessage = {} } }),
        .stated_elements = fd(6, .{ .List = .{ .SubMessage = {} } }),
        .obstacles = fd(7, .{ .List = .{ .SubMessage = {} } }),
        .fights = fd(8, .{ .List = .{ .SubMessage = {} } }),
        .has_aggressive_monsters = fd(9, .{ .Varint = .Simple }),
        .specific_complementary_information = fd(null, .{ .OneOf = specific_complementary_information_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const GameRolePlayShowActorsEvent = struct {
    actors: ArrayList(com_ankama_dofus_server_game_protocol_common.ActorPositionInformation),

    pub const _desc_table = .{
        .actors = fd(1, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const FightMapInformationEvent = struct {
    subarea_id: i32 = 0,
    map_id: i64 = 0,
    specific_complementary_information: ?specific_complementary_information_union,

    pub const _specific_complementary_information_case = enum {
        coordinates,
        breach_information,
        anomaly_information,
    };
    pub const specific_complementary_information_union = union(_specific_complementary_information_case) {
        coordinates: com_ankama_dofus_server_game_protocol_common.MapCoordinates,
        breach_information: MapComplementaryBreachInformation,
        anomaly_information: MapComplementaryAnomalyInformation,
        pub const _union_desc = .{
            .coordinates = fd(3, .{ .SubMessage = {} }),
            .breach_information = fd(4, .{ .SubMessage = {} }),
            .anomaly_information = fd(5, .{ .SubMessage = {} }),
        };
    };

    pub const _desc_table = .{
        .subarea_id = fd(1, .{ .Varint = .Simple }),
        .map_id = fd(2, .{ .Varint = .Simple }),
        .specific_complementary_information = fd(null, .{ .OneOf = specific_complementary_information_union }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapComplementaryInHouseInformation = struct {
    current_house: ?com_ankama_dofus_server_game_protocol_common.House = null,

    pub const _desc_table = .{
        .current_house = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapComplementaryWithCoordsInformation = struct {
    coordinates: ?com_ankama_dofus_server_game_protocol_common.MapCoordinates = null,

    pub const _desc_table = .{
        .coordinates = fd(1, .{ .SubMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapComplementaryBreachInformation = struct {
    floor: i32 = 0,
    room: i32 = 0,
    infinity_mode: i32 = 0,
    branches: ArrayList(com_ankama_dofus_server_game_protocol_common.BreachBranch),

    pub const _desc_table = .{
        .floor = fd(1, .{ .Varint = .Simple }),
        .room = fd(2, .{ .Varint = .Simple }),
        .infinity_mode = fd(3, .{ .Varint = .Simple }),
        .branches = fd(4, .{ .List = .{ .SubMessage = {} } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapComplementaryAnomalyInformation = struct {
    level: i32 = 0,
    closing_time: i64 = 0,

    pub const _desc_table = .{
        .level = fd(1, .{ .Varint = .Simple }),
        .closing_time = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapComplementaryHavenBagInformation = struct {
    owner_information: ?com_ankama_dofus_server_game_protocol_common.Character = null,
    theme: i32 = 0,
    room_id: i32 = 0,
    max_room_id: i32 = 0,

    pub const _desc_table = .{
        .owner_information = fd(1, .{ .SubMessage = {} }),
        .theme = fd(2, .{ .Varint = .Simple }),
        .room_id = fd(3, .{ .Varint = .Simple }),
        .max_room_id = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const MapObstacle = struct {
    cell_id: i32 = 0,
    state: ObstacleState = @enumFromInt(0),

    pub const _desc_table = .{
        .cell_id = fd(1, .{ .Varint = .Simple }),
        .state = fd(2, .{ .Varint = .Simple }),
    };

    pub const ObstacleState = enum(i32) {
        OBSTACLE_OPENED = 0,
        OBSTACLE_CLOSED = 1,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
