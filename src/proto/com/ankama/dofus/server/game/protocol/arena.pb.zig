// Code generated by protoc-gen-zig
///! package com.ankama.dofus.server.game.protocol.arena
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayList = std.ArrayList;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;

pub const ArenaType = enum(i32) {
    ONE_VS_ONE = 0,
    TWO_VS_TWO = 1,
    THREE_VS_THREE = 2,
    _,
};

pub const ArenaRegisterRequest = struct {
    arena_type: ArenaType = @enumFromInt(0),

    pub const _desc_table = .{
        .arena_type = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ArenaUnregisterRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ArenaFightAnswerRequest = struct {
    accept: bool = false,

    pub const _desc_table = .{
        .accept = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ArenaFightAnswerResponse = struct {
    acknowledged: bool = false,

    pub const _desc_table = .{
        .acknowledged = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ArenaRegistrationStatusEvent = struct {
    registered: bool = false,
    step: Step = @enumFromInt(0),
    battle_mode: ArenaType = @enumFromInt(0),

    pub const _desc_table = .{
        .registered = fd(1, .{ .Varint = .Simple }),
        .step = fd(2, .{ .Varint = .Simple }),
        .battle_mode = fd(3, .{ .Varint = .Simple }),
    };

    pub const Step = enum(i32) {
        REGISTERED = 0,
        WAITING_FIGHT = 1,
        STARTING_FIGHT = 2,
        UNREGISTERED = 3,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ArenaFightPropositionEvent = struct {
    fight_id: i32 = 0,
    allies: ArrayList(i64),
    duration: i32 = 0,

    pub const _desc_table = .{
        .fight_id = fd(1, .{ .Varint = .Simple }),
        .allies = fd(2, .{ .PackedList = .{ .Varint = .Simple } }),
        .duration = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ArenaFighterStatusEvent = struct {
    fight_id: i32 = 0,
    character_id: i64 = 0,
    accepted: bool = false,

    pub const _desc_table = .{
        .fight_id = fd(1, .{ .Varint = .Simple }),
        .character_id = fd(2, .{ .Varint = .Simple }),
        .accepted = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ArenaUpdatePlayerInformationEvent = struct {
    arena_ranks: ArrayList(ArenaRank),
    ban_end_date: ManagedString = .Empty,

    pub const _desc_table = .{
        .arena_ranks = fd(1, .{ .List = .{ .SubMessage = {} } }),
        .ban_end_date = fd(2, .String),
    };

    pub const ArenaRank = struct {
        arena_type: ArenaType = @enumFromInt(0),
        league_ranking: ?LeagueRanking = null,
        best_league_id: i32 = 0,
        best_rating: i32 = 0,
        daily_victory_count: i32 = 0,
        season_victory_count: i32 = 0,
        daily_fight_count: i32 = 0,
        season_fight_count: i32 = 0,
        fight_needed_for_ladder: i32 = 0,

        pub const _desc_table = .{
            .arena_type = fd(1, .{ .Varint = .Simple }),
            .league_ranking = fd(2, .{ .SubMessage = {} }),
            .best_league_id = fd(3, .{ .Varint = .Simple }),
            .best_rating = fd(4, .{ .Varint = .Simple }),
            .daily_victory_count = fd(5, .{ .Varint = .Simple }),
            .season_victory_count = fd(6, .{ .Varint = .Simple }),
            .daily_fight_count = fd(7, .{ .Varint = .Simple }),
            .season_fight_count = fd(8, .{ .Varint = .Simple }),
            .fight_needed_for_ladder = fd(9, .{ .Varint = .Simple }),
        };

        pub const LeagueRanking = struct {
            rating: i32 = 0,
            league_id: i32 = 0,
            ladder_position: i32 = 0,

            pub const _desc_table = .{
                .rating = fd(1, .{ .Varint = .Simple }),
                .league_id = fd(2, .{ .Varint = .Simple }),
                .ladder_position = fd(3, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ArenaSwitchToFightServerEvent = struct {
    address: ManagedString = .Empty,
    ports: ArrayList(i32),
    token: ManagedString = .Empty,

    pub const _desc_table = .{
        .address = fd(1, .String),
        .ports = fd(2, .{ .PackedList = .{ .Varint = .Simple } }),
        .token = fd(3, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ArenaLeagueRewardsEvent = struct {
    season_id: i32 = 0,
    league_id: i32 = 0,
    ladder_position: i32 = 0,
    end_season_reward: bool = false,

    pub const _desc_table = .{
        .season_id = fd(1, .{ .Varint = .Simple }),
        .league_id = fd(2, .{ .Varint = .Simple }),
        .ladder_position = fd(3, .{ .Varint = .Simple }),
        .end_season_reward = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ArenaPlayerBehavioursEvent = struct {
    flags: ArrayList(ManagedString),
    sanctions: ArrayList(ManagedString),
    ban_duration: ?i32 = null,

    pub const _desc_table = .{
        .flags = fd(1, .{ .List = .String }),
        .sanctions = fd(2, .{ .List = .String }),
        .ban_duration = fd(3, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ArenaRegistrationWarningEvent = struct {
    battle_mode: ArenaType = @enumFromInt(0),

    pub const _desc_table = .{
        .battle_mode = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ArenaFighterIdleEvent = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const ArenaSwitchXpRewardsModeRequest = struct {
    xpRewards: bool = false,

    pub const _desc_table = .{
        .xpRewards = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SurrenderStateEvent = struct {
    permitSurrender: bool = false,
    permitVote: bool = false,

    pub const _desc_table = .{
        .permitSurrender = fd(1, .{ .Varint = .Simple }),
        .permitVote = fd(2, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SurrenderInfoRequest = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SurrenderInfoResponse = struct {
    surrender_response: ?SurrenderResponse = null,
    surrender_vote_response: ?SurrenderVoteResponse = null,
    has_sanction: bool = false,

    pub const _desc_table = .{
        .surrender_response = fd(1, .{ .SubMessage = {} }),
        .surrender_vote_response = fd(2, .{ .SubMessage = {} }),
        .has_sanction = fd(3, .{ .Varint = .Simple }),
    };

    pub const SurrenderResponse = struct {
        response: ?response_union,

        pub const _response_case = enum {
            accepted,
            refused,
            before_turn,
            before_vote,
        };
        pub const response_union = union(_response_case) {
            accepted: SurrenderAccepted,
            refused: SurrenderRefused,
            before_turn: SurrenderBeforeTurn,
            before_vote: SurrenderBeforeVote,
            pub const _union_desc = .{
                .accepted = fd(1, .{ .SubMessage = {} }),
                .refused = fd(2, .{ .SubMessage = {} }),
                .before_turn = fd(3, .{ .SubMessage = {} }),
                .before_vote = fd(4, .{ .SubMessage = {} }),
            };
        };

        pub const _desc_table = .{
            .response = fd(null, .{ .OneOf = response_union }),
        };

        pub const SurrenderAccepted = struct {
            pub const _desc_table = .{};

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const SurrenderRefused = struct {
            pub const _desc_table = .{};

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const SurrenderBeforeTurn = struct {
            min_turn_for_surrender: i32 = 0,

            pub const _desc_table = .{
                .min_turn_for_surrender = fd(1, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const SurrenderBeforeVote = struct {
            pub const _desc_table = .{};

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub const SurrenderVoteResponse = struct {
        response: ?response_union,

        pub const _response_case = enum {
            accepted,
            refused,
            before_turn,
            already_asked,
            waiting,
        };
        pub const response_union = union(_response_case) {
            accepted: SurrenderVoteAccepted,
            refused: SurrenderVoteRefused,
            before_turn: SurrenderVoteBeforeTurn,
            already_asked: SurrenderVoteAlreadyAsked,
            waiting: SurrenderVoteWaiting,
            pub const _union_desc = .{
                .accepted = fd(1, .{ .SubMessage = {} }),
                .refused = fd(2, .{ .SubMessage = {} }),
                .before_turn = fd(3, .{ .SubMessage = {} }),
                .already_asked = fd(4, .{ .SubMessage = {} }),
                .waiting = fd(5, .{ .SubMessage = {} }),
            };
        };

        pub const _desc_table = .{
            .response = fd(null, .{ .OneOf = response_union }),
        };

        pub const SurrenderVoteAccepted = struct {
            pub const _desc_table = .{};

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const SurrenderVoteRefused = struct {
            pub const _desc_table = .{};

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const SurrenderVoteBeforeTurn = struct {
            min_turn_for_surrender_vote: i32 = 0,

            pub const _desc_table = .{
                .min_turn_for_surrender_vote = fd(1, .{ .Varint = .Simple }),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const SurrenderVoteAlreadyAsked = struct {
            pub const _desc_table = .{};

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub const SurrenderVoteWaiting = struct {
            vote_unlock_time_stamp: ManagedString = .Empty,

            pub const _desc_table = .{
                .vote_unlock_time_stamp = fd(1, .String),
            };

            pub usingnamespace protobuf.MessageMixins(@This());
        };

        pub usingnamespace protobuf.MessageMixins(@This());
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SurrenderVoteCastRequest = struct {
    vote: bool = false,

    pub const _desc_table = .{
        .vote = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SurrenderVoteStartEvent = struct {
    already_casted_vote: bool = false,
    participant_number: i32 = 0,
    casted_vote_number: i32 = 0,
    vote_duration: i32 = 0,

    pub const _desc_table = .{
        .already_casted_vote = fd(1, .{ .Varint = .Simple }),
        .participant_number = fd(2, .{ .Varint = .Simple }),
        .casted_vote_number = fd(3, .{ .Varint = .Simple }),
        .vote_duration = fd(4, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SurrenderVoteUpdateEvent = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const SurrenderVoteEndEvent = struct {
    voteResult: bool = false,

    pub const _desc_table = .{
        .voteResult = fd(1, .{ .Varint = .Simple }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const OpponentSurrenderEvent = struct {
    pub const _desc_table = .{};

    pub usingnamespace protobuf.MessageMixins(@This());
};
